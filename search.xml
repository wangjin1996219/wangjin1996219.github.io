<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>矩阵中的路径</title>
    <url>/2021/01/21/%E5%89%91%E6%8C%87offer-12/</url>
    <content><![CDATA[<hr>
<a id="more"></a>

<h1 id="·-题目描述"><a href="#·-题目描述" class="headerlink" title="· 题目描述"></a>· 题目描述</h1><blockquote>
<p><strong>题目来自LeetCode ：</strong><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof">https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof</a></p>
</blockquote>
<p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</p>
<p>[[“a”,”b”,”c”,”e”],<br>[“s”,”f”,”c”,”s”],<br>[“a”,”d”,”e”,”e”]]</p>
<p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p>
<h1 id="·-解题思路"><a href="#·-解题思路" class="headerlink" title="· 解题思路"></a>· 解题思路</h1><p>该题属于矩阵的搜索问题，可以想到使用<a href="https://eudemonia.tech/2021/01/20/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/#more">深度优先遍历算法</a>来解决。通过DFS递归，先朝一个方向搜索，当路径上遇到一个节点k+1不满足条件时，再回溯至上个节点，沿其它方向搜索，以此类推。如<a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/hui-su-suan-fa-qiu-jie-by-sdwwld/">下图</a>所示：</p>
<p><img src="/2021/01/21/%E5%89%91%E6%8C%87offer-12/%E7%9F%A9%E9%98%B5.png"></p>
<p>首先，在矩阵中任选一个节点，作为一条path的起点；</p>
<p>然后，通过DFS以该节点作为起始点，开始递归。递归的结束结果有两种可能：</p>
<p>1、返回false：说明在递归的过程中，存在一个节点（r，c）假设它对应的字符串中第k个字符值，它的四个相邻的格子（r-1，c）（r+1，c）（r，c-1）（r，c+1）都找不到字符串的下一个字符值（k+1）；</p>
<p>2、返回true：如上图所示，从A点开始，到B、C、C、E每个点总有一个方向的字符值能和给定的字符串的下一个字符值相等，则递归结束，可以看出递归成功结束的条件是已经在矩阵中找到了与给定的字符串所有的字符。</p>
<p>最后，循环结束说明矩阵中没有该路径，返回false。</p>
<h1 id="·-代码及注解"><a href="#·-代码及注解" class="headerlink" title="· 代码及注解"></a>· 代码及注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] words=word.toCharArray();<span class="comment">//将字符串转换为字符数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;board.length;r++)&#123;<span class="comment">//以矩阵的第一行为起始行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;board[<span class="number">0</span>].length;c++)&#123;<span class="comment">//以矩阵的第一列为起始列，依次以每个格子作为起始点，开启DFS遍历</span></span><br><span class="line">            <span class="keyword">if</span>(DFS(board,words,r,c,<span class="number">0</span>))&#123;<span class="comment">//每次传入的参数就是board、words、起始点坐标、字符串起始点0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//当找到对应路径，返回true，结束循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//找不到对应的路径，返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">DFS</span><span class="params">(<span class="keyword">char</span>[][] board,<span class="keyword">char</span>[] words,<span class="keyword">int</span> r,<span class="keyword">int</span> c,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;<span class="number">0</span>||c&lt;<span class="number">0</span>||r&gt;board.length-<span class="number">1</span>||c&gt;board[<span class="number">0</span>].length-<span class="number">1</span>||board[r][c]!=words[k]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">/*递归的结束条件：</span></span><br><span class="line"><span class="comment">                       1、越界 r&lt;0||c&lt;0||r&gt;board.length-1||c&gt;board[0].length-1</span></span><br><span class="line"><span class="comment">                       2、矩阵的网格字符值与字符串的字符值不同 board[r][c]!=words[k]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(k==words.length-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//该行表示递归成功的出口</span></span><br><span class="line">        board[r][c]=<span class="string">&#x27; &#x27;</span>;<span class="comment">//每当一个网格字符值满足条件，将该值置为空值，防止二次访问</span></span><br><span class="line">        <span class="keyword">boolean</span> res=DFS(board,words,r+<span class="number">1</span>,c,k+<span class="number">1</span>)||DFS(board,words,r-<span class="number">1</span>,c,k+<span class="number">1</span>)||DFS(board,words,r,c+<span class="number">1</span>,k+<span class="number">1</span>)||DFS(board,words,r,c-<span class="number">1</span>,k+<span class="number">1</span>);<span class="comment">//每当访问到一个网格，对它的上下左右四个方向递归，只要有一个方向满足条件即可，当四个方向都返回false，说明此路不通，换下一个方向或者重新选择起始点</span></span><br><span class="line">        board[r][c]=words[k];<span class="comment">//当一个格点四个方向的邻接点都不合要求，将该网格值还原</span></span><br><span class="line">        <span class="keyword">return</span> res;<span class="comment">//返回递归结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>深度优先遍历</title>
    <url>/2021/01/20/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<hr>
<a id="more"></a>

<h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>从图中的某个顶点K出发，按照一定的原则（比如：总是先选择右边第一个点）先去访问它的邻接点，初始状态下K的邻接点未被访问过，按照这个原则找到它的一个未被访问过的邻接点，然后将该邻接点标记为“true”，表示该点已经被访问过。直到有一个顶点N，按照该原则下，它的邻接点已经被访问，则退回到N点，再去访问它右边第二个点，以此类推，直到所有的顶点都被访问到，遍历结束。</p>
<p>这里我们以邻接矩阵的方式来讲解DFS的算法执行流程：</p>
<p>​                              <img src="/2021/01/20/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/邻接矩阵.jpg" style="zoom: 80%;"></p>
<blockquote>
<p><strong>Note：</strong>该代码不包含图的建立部分。其中，numVertexes为图中的节点数目，vexs[]数组为顶点表 ,arc[] []为边表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[G.numVertexes];<span class="comment">//创建visited[]数组，作为节点的访问标志</span></span><br><span class="line"><span class="comment">/*邻接矩阵的深度优先遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.numVertexes;i++)&#123;</span><br><span class="line">        visited[i]=<span class="keyword">false</span>;<span class="comment">//初始化visited[]数组为false，表示初始状态下节点未被访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;j&lt;G.numVertexes;j++)&#123;<span class="comment">//从V0开始循环遍历树中的节点</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[i])&#123;<span class="comment">//若节点Vi不为false，说明该节点未被访问过，调用DFS()方法。这里可以视为对边表的行遍历</span></span><br><span class="line">            DFS(G,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*邻接矩阵的深度优先递归算法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph G,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    visited[i]=<span class="keyword">true</span>;<span class="comment">//另visited数组中的第i个节点的标志位true，表示该节点已经被访问</span></span><br><span class="line">    System.out.println(G.vexs[i]);<span class="comment">//可以对该顶点进行输出等操作</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G.numVertexes;j++)&#123;<span class="comment">//i表示边表矩阵的第i行，当满足G.[i][j]!==1（表示节点j是i的邻接点）且                                                   //visited[j]==false未被访问，则对节点j再进行DFS递归</span></span><br><span class="line">        <span class="keyword">if</span>(G.[i][j]!==<span class="number">1</span>&amp;&amp;visited[j]==<span class="keyword">false</span>)&#123;</span><br><span class="line">            DFS(G,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当图是<strong>连通图</strong>时，DFSTraverse（）方法中的循环执行一次就可以；</p>
<p>当图是<strong>非连通图</strong>时，需要对它的连通分量分别进行DFS遍历，当图中尚有顶点还有顶点未被访问，则另选图中一个未曾被访问的顶点作为起始点，重复上述过程，直到图中所有的节点都被访问到为止。</p>
]]></content>
      <categories>
        <category>数据结构及算法</category>
      </categories>
      <tags>
        <tag>大话数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树中和为某一值的路径</title>
    <url>/2021/01/19/%E5%89%91%E6%8C%87offer-34/</url>
    <content><![CDATA[<hr>
<a id="more"></a>

<h1 id="·-题目描述"><a href="#·-题目描述" class="headerlink" title="· 题目描述"></a>· 题目描述</h1><blockquote>
<p><strong>题目来自LeetCode ：</strong><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof">https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof</a></p>
</blockquote>
<p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p>
<img src="/2021/01/19/%E5%89%91%E6%8C%87offer-34/1.png" style="zoom:50%;">

<h1 id="·-解题思路"><a href="#·-解题思路" class="headerlink" title="· 解题思路"></a>· 解题思路</h1><p>由于路径是从根节点出发到叶节点，也就是路径总是以根节点作为起始点，因此我们需要先遍历根节点，考虑使用前序遍历。</p>
<p>对于上图中的二叉树，其前序遍历过程如下表所示：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>是否叶节点</th>
<th>路径</th>
<th>路径节点的和</th>
<th>是否符合要求</th>
</tr>
</thead>
<tbody><tr>
<td>访问节点5</td>
<td>否</td>
<td>5</td>
<td>5</td>
<td>否</td>
</tr>
<tr>
<td>访问节点4</td>
<td>否</td>
<td>5,4</td>
<td>9</td>
<td>否</td>
</tr>
<tr>
<td>访问节点11</td>
<td>否</td>
<td>5,4,11</td>
<td>20</td>
<td>否</td>
</tr>
<tr>
<td>访问节点7</td>
<td>是</td>
<td>5,4,11,7</td>
<td>27</td>
<td>否</td>
</tr>
<tr>
<td>访问节点2</td>
<td>是</td>
<td>5,4,11,2</td>
<td>22</td>
<td>是</td>
</tr>
<tr>
<td>访问节点8</td>
<td>否</td>
<td>5,8</td>
<td>13</td>
<td>否</td>
</tr>
<tr>
<td>……</td>
<td>……</td>
<td>……</td>
<td>……</td>
<td></td>
</tr>
</tbody></table>
<p>通过表，我们可以得到算法的执行流程：</p>
<p>当访问一个节点时，首先判断该节点是不是null，当节点为null时，直接返回；</p>
<p>当访问的节点不为null，将该节点的值加到动态数组temp中，并在目标值tar上减去该节点的数值。通过上表可知当一个节点为<strong>叶子节点</strong>且<strong>路径的和等于sum</strong>时该路径复合题目要求（此处当tar的值为零时表示路径的和等于sum）；</p>
<p>当被访问的节点不为null，也不满足第二条的要求时，进行左右子树的递归；</p>
<p>一个被访问的节点递归结束，要从temp中删除该节点的值，比如：5→4→11→7，当节点7访问结束，要将7从temp删除，然后返回        到访问节点11的函数，开始递归它的右子树，也就是节点2。</p>
<blockquote>
<p><strong>Note：</strong>当一条路径满足要求时，要新建一个LinkedList(temp)对象传入res中（复制），因为如果直接res.add(temp)相当于传入temp对象，当temp改变时，res也会随之变化。</p>
</blockquote>
<h1 id="·-代码及注解"><a href="#·-代码及注解" class="headerlink" title="· 代码及注解"></a>· 代码及注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();<span class="comment">//res中存储的是满足要求的所有路径</span></span><br><span class="line">    LinkedList&lt;Integer&gt; temp = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">//temp存储动态变化的路径</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        path(root,sum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">path</span><span class="params">(TreeNode root,<span class="keyword">int</span> tar)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tar-=root.val;</span><br><span class="line">        temp.add(root.val);</span><br><span class="line">        <span class="keyword">if</span>(tar==<span class="number">0</span>&amp;&amp;root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">           res.add(<span class="keyword">new</span> LinkedList(temp));</span><br><span class="line">        &#125;</span><br><span class="line">        path(root.left,tar);</span><br><span class="line">        path(root.right,tar);</span><br><span class="line">        temp.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
</search>
