<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wj-Blog</title>
  
  
  <link href="http://wangjin1996219.github.io/atom.xml" rel="self"/>
  
  <link href="http://wangjin1996219.github.io/"/>
  <updated>2021-04-01T12:32:27.541Z</updated>
  <id>http://wangjin1996219.github.io/</id>
  
  <author>
    <name>老王家的小王呀</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>广度优先遍历</title>
    <link href="http://wangjin1996219.github.io/2021/04/01/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
    <id>http://wangjin1996219.github.io/2021/04/01/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</id>
    <published>2021-04-01T03:06:09.000Z</published>
    <updated>2021-04-01T12:32:27.541Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p><strong>广度优先遍历（BFS）：</strong>如果说深度优先遍历类似于树的前序遍历，那么广度优先遍历就类似于层序遍历，从上往下对每一层依次访问，在每一层中，从左往右（也可以从右往左）访问结点，访问完一层就进入下一层，直到没有结点可以访问为止。　</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>后序补</p><h1 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h1><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">热题100-102. 二叉树的层序遍历</a></strong></p><p>给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>创建双端队列</li><li>如果根节点不为null，将根节点加入到队列中</li><li>为了实现分层打印，在while循环中，每次得到队列的长度也就是该层的节点数，通过for循环将本层的节点打印，每次打印将该节点的左右子树加入到队列中，但是由于长度限制，新加入的节点在本次不会被打印</li></ul><h3 id="代码及注解"><a href="#代码及注解" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root TreeNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型ArrayList&lt;ArrayList&lt;&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrder (TreeNode root) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; dq=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        dq.addLast(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!dq.isEmpty())&#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; temp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">int</span> size=dq.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=size;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                TreeNode node=dq.pollFirst();</span><br><span class="line">                temp.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    dq.addLast(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    dq.addLast(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer-32 - III. 从上到下打印二叉树 III</a></strong></p><p>之字形打印二叉树</p></blockquote><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>当二叉树的根节点1打印之后，将它的左子节点和右子节点先后保存到一个容器中，当打印二层的节点时，先打印节点3再打印节点2，看起来节点在该容器中是先进后出的，因此可以考虑这个容器用栈来实现。</li><li>因为是Z形遍历，所以子节点放入容器的顺序是不同的，对于奇数层，打印顺序是left→right，因为是先进后出所以存储顺序是right→left，偶数层同理。</li><li>两个栈可以合并成一个队列，大大节省空间，把队列想象成两个栈底对底拼接在一起，左端存取元素用addFirst（）和pollFirst（），右端存取元素用addLast（）和pollLast（）。</li><li>奇偶层用res的元素个数来判断。</li></ul><h3 id="代码及注解-1"><a href="#代码及注解-1" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root TreeNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型ArrayList&lt;ArrayList&lt;&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; zigzagLevelOrder (TreeNode root) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; dq=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>) dq.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!dq.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size=dq.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; temp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">if</span>(res.size()%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=size;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                    TreeNode node=dq.pollFirst();</span><br><span class="line">                    temp.add(node.val);</span><br><span class="line">                    <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        dq.addLast(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        dq.addLast(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=size;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                    TreeNode node=dq.pollLast();</span><br><span class="line">                    temp.add(node.val);</span><br><span class="line">                    <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        dq.addFirst(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        dq.addFirst(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="LeetCode题解" scheme="http://wangjin1996219.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="基础算法篇" scheme="http://wangjin1996219.github.io/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>设计</title>
    <link href="http://wangjin1996219.github.io/2021/03/28/%E8%AE%BE%E8%AE%A1/"/>
    <id>http://wangjin1996219.github.io/2021/03/28/%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-03-28T02:20:50.000Z</published>
    <updated>2021-03-28T04:37:20.287Z</updated>
    
    <content type="html"><![CDATA[<hr><!--nore--><h1 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h1><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/lru-cache/">热题100-146. LRU 缓存机制</a></strong></p><p>实现页面置换算法中的最近最久未被使用算法（LRU）中的set和get方法</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>set和get方法的实现需要：</li><li>双端链表：存储插入的每一个节点，节点包括四个成员变量：key、value、preNode、nextNode（分别指向前后节点）；</li><li>HashMap：键值为节点的key值，值为节点；</li><li>两个哑结点：方便头部插入和尾部删除；</li><li>addTohead：将节点插入到双端链表的头部，set方法使用；</li><li>removeNode：移除一个节点；</li><li>removeToHead：当get方法查询一个节点时，先使用removeNode将该节点在双端链表中删除，再使用addToHead方法插入到头部；</li><li>removeTail：移除尾部节点；</li></ul><blockquote><p><strong>注意：</strong>当插入节点时，必须同时保存到HashMap中，当删除节点时，将该节点在HashMap中删除</p></blockquote><h2 id="代码及注解"><a href="#代码及注解" class="headerlink" title="代码及注解"></a>代码及注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * lru design</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operators int整型二维数组 the ops</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k int整型 the k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DLinkedList</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        DLinkedList pre;</span><br><span class="line">        DLinkedList next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DLinkedList</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DLinkedList</span><span class="params">(<span class="keyword">int</span> key,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key=key;</span><br><span class="line">            <span class="keyword">this</span>.value=value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addToHead</span><span class="params">(DLinkedList node)</span></span>&#123;</span><br><span class="line">        node.next=head.next;</span><br><span class="line">        node.next.pre=node;</span><br><span class="line">        head.next=node;</span><br><span class="line">        node.pre=head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(DLinkedList node)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        DLinkedList temp=node;</span><br><span class="line">        node.pre.next=node.next;</span><br><span class="line">        node.next.pre=node.pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DLinkedList <span class="title">removeToHead</span><span class="params">(DLinkedList node)</span></span>&#123;</span><br><span class="line">        DLinkedList temp=node;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(temp);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DLinkedList node=tail.pre;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        hm.remove(node.key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!hm.containsKey(key))&#123;</span><br><span class="line">            DLinkedList node =<span class="keyword">new</span> DLinkedList(key,value);</span><br><span class="line">            addToHead(node);</span><br><span class="line">            hm.put(key,node);</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">if</span>(size&gt;capacity)&#123;</span><br><span class="line">                removeTail();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hm.containsKey(key))&#123;</span><br><span class="line">            DLinkedList node=hm.get(key);</span><br><span class="line">            <span class="keyword">return</span> removeToHead(node).value; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer,DLinkedList&gt; hm=<span class="keyword">new</span> HashMap&lt;Integer,DLinkedList&gt;();</span><br><span class="line">    DLinkedList head=<span class="keyword">new</span> DLinkedList();</span><br><span class="line">    DLinkedList tail=<span class="keyword">new</span> DLinkedList();</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] LRU (<span class="keyword">int</span>[][] operators, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity=k;</span><br><span class="line">        head.next=tail;</span><br><span class="line">        tail.pre=head;</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span>[] nums:operators)&#123;</span><br><span class="line">             <span class="keyword">if</span>(nums[<span class="number">0</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                 put(nums[<span class="number">1</span>],nums[<span class="number">2</span>]);</span><br><span class="line">             &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[<span class="number">0</span>]==<span class="number">2</span>)&#123;</span><br><span class="line">                 res.add(get(nums[<span class="number">1</span>]));</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">int</span>[] ans=<span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();i++)&#123;</span><br><span class="line">            ans[i]=(<span class="keyword">int</span>)res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;!--nore--&gt;

&lt;h1 id=&quot;相关题目&quot;&gt;&lt;a href=&quot;#相关题目&quot; class=&quot;headerlink&quot; title=&quot;相关题目&quot;&gt;&lt;/a&gt;相关题目&lt;/h1&gt;&lt;h2 id=&quot;题目一&quot;&gt;&lt;a href=&quot;#题目一&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E6%95%B0%E7%BB%84/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E6%95%B0%E7%BB%84/</id>
    <published>2021-03-25T08:48:55.000Z</published>
    <updated>2021-03-25T08:48:55.814Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>双指针</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2021-03-25T08:48:35.000Z</published>
    <updated>2021-04-01T13:58:11.079Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>通过两个指针来实现题目要求，大大降低了空间复杂度</p><h1 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h1><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/linked-list-cycle/">热题100-141. 环形链表</a></strong></p><p>给定一个链表，判断链表中是否有环。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>设置两个指针slow和fast</p><p>slow每次移动一个节点，fast每次移动两个节点</p><p>因为两个指针的移动距离不同，当链表没有环时，两个指针永远不能相遇，只有当链表中存在环时，两个指针才有可能重合</p></li><li><p>循环遍历链表，循环条件为：<code>fast!=null&amp;&amp;fast.next!=null</code>，因为慢指针在快指针后面，当快指针不为null时，慢指针一定不为null</p></li><li><p>当循环中满足fast==slow时，返回true结束循环，否则链表遍历结束返回false</p></li></ul><h3 id="代码及注解"><a href="#代码及注解" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        ListNode fast=head.next;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;<span class="comment">//遍历到一个节点时，首先这个节点不能为null，如果该节点不进行判断，就会出现空指针异常</span></span><br><span class="line">            <span class="keyword">if</span>(slow==fast)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">热题100-142. 环形链表 II</a></strong></p><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p></blockquote><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>寻找第一次相遇的点：</strong></p><ul><li><p>设置两个指针slow和fast</p><p>slow每次移动一个节点，fast每次移动两个节点</p><p>因为两个指针的移动距离不同，当链表没有环时，两个指针永远不能相遇，只有当链表中存在环时，两个指针才有可能重合</p></li><li><p>循环遍历链表，循环条件为：<code>fast!=null&amp;&amp;fast.next!=null</code>，因为慢指针在快指针后面，当快指针不为null时，慢指针一定不为null</p></li><li><p>当循环中满足fast==slow时，结束循环，判断slow和fast是否相等，不相等返回null，反之，继续执行下面的语句</p></li></ul><p><strong>第二次相遇的点就是环的入口：</strong></p><p>分析：设第一次相遇时，指针slow走过s步，fast走的步数比它多n倍的b步，所以fast走过的步数是s+nb；又因为fast一次走两步，所以s+nb=2s,所以s=nb;也就是相遇的这个点是b的倍数，环的入口满足a+xb,所以另一个指针指向头部，另一个指针不动，两个指针一次移动一个节点，第二次相遇时，走过的步数满足a+xb，就是环的入口节点。</p><h3 id="代码及注解-1"><a href="#代码及注解-1" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode fast=head.next;</span><br><span class="line">    ListNode slow=head;</span><br><span class="line">    <span class="keyword">while</span>(slow!=fast)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fast==<span class="keyword">null</span>||fast.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast=fast.next.next;</span><br><span class="line">        slow=slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast=head;</span><br><span class="line">    slow=slow.next;</span><br><span class="line">    <span class="keyword">while</span>(fast!=slow)&#123;</span><br><span class="line">        fast=fast.next;</span><br><span class="line">        slow=slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>使用HashMap存储数组/字符串中的元素及其对应的下标；</li><li>设置左右两个指针，右指针遍历数组，每到一个元素的位置，先在HashMap中查看该元素是否存在，如果元素存在于HashMap中，更新left指针的值，另(left，right]区间内没有重复的元素；</li><li>将该元素及其下标存储到HashMap中；</li><li>更新最长无重复子串的长度；</li><li>返回结果。</li></ul><h3 id="代码及注解-2"><a href="#代码及注解-2" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length()&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> s.length();</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Character,Integer&gt; hm=<span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">    <span class="comment">//HashMap新的键值对会覆盖原有的键值相同的键值对</span></span><br><span class="line">    <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> slow=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span>[] ss=s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fast=<span class="number">0</span>;fast&lt;s.length();fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hm.containsKey(ss[fast]))&#123;</span><br><span class="line">           slow=Math.max(hm.get(ss[fast]),slow);<span class="comment">//保证区间[slow+1,right]内不存在重复字符</span></span><br><span class="line">           <span class="comment">//例：s=&quot;abcabcbb&quot;</span></span><br><span class="line">           <span class="comment">//当right指向第三个b时</span></span><br><span class="line">           <span class="comment">//假如left指向第二个c:此时显示有重复值，但是是在left之前，所以left不用变；</span></span><br><span class="line">           <span class="comment">//假如left指向第二个a:此时显示有重复值，是在left右边,所以更新left让其指向第二个b。</span></span><br><span class="line">           <span class="comment">//始终确保区间[slow+1,right]内不存在重复字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        max=Math.max(max,fast-slow);</span><br><span class="line">        hm.put(ss[fast],fast);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">热题100-19. 删除链表的倒数第 N 个结点</a></strong></p><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p></blockquote><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>设置快慢指针；</li><li>让快指针先走n步的距离，当慢指针开始走时，应该距离快指针有n步的距离；</li><li>快慢指针同时移动，当快指针移动到链表尾部时，慢指针正好在倒数第n个节点；</li><li>为了方便删除，使用一个哑结点，让慢指针从该节点开始移动，当快指针移动到尾部时，慢指针移动到倒数第n个节点的前一个节点，直接删除倒数第n个节点。</li></ul><h3 id="代码及注解-3"><a href="#代码及注解-3" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>, head);</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line">        second.next = second.next.next;</span><br><span class="line">        ListNode ans = dummy.next;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h2><blockquote><p><strong><a href="https://www.nowcoder.com/practice/c3a6afee325e472386a1c4eb1ef987f3?tpId=190&tqId=35226&rp=1&ru=/activity/oj&qru=/ta/job-code-high-rd/question-ranking&tab=answerKey">牛客-反转字符串</a></strong></p><p>写出一个程序，接受一个字符串，然后输出该字符串反转后的字符串。（字符串长度不超过1000）</p></blockquote><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>双指针一个从前往后，一个从后往前，直接交换就可以</p><h3 id="代码及注解-4"><a href="#代码及注解-4" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str string字符串 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">solve</span> <span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] strs=str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=strs.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch=strs[left];</span><br><span class="line">            strs[left]=strs[right];</span><br><span class="line">            strs[right]=ch;</span><br><span class="line">            right--;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(strs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目六"><a href="#题目六" class="headerlink" title="题目六"></a>题目六</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/3sum/">热题100-15. 三数之和</a></strong></p><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p></blockquote><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>将数组排序，排序后的数组顺序为从小到大；</p></li><li><p>最外层通过for循环，遍历数组中的每一个元素，固定这个元素，再用双指针遍历右边部分的元素，看是否有三个元素和为0；</p></li><li><p>for循环内部：</p><p>1、每遍历到一个元素，判断是否大于0，因为该元素为最小元素，如果它大于0，以后的都大于零，直接结束for循环</p><p>2、每遍历到一个元素，判断它是否跟上一个元素相等，为了防止答案重复，如果元素相同向下顺延</p><p>3、当该元素不满足上面的两条，固定该元素，设置双指针指向余下部分的首尾元素</p><p>4、当left&lt;right时，执行for循环，通过sum与0的大小关系来移动双指针，同时记录满足条件的集合</p></li></ul><h3 id="代码及注解-5"><a href="#代码及注解-5" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;<span class="comment">//牛客上需要自己导包，Java一般导这个就够用了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] num) &#123;</span><br><span class="line">        <span class="keyword">if</span>(num.length&lt;<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    Arrays.sort(num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num.length;k++)&#123;</span><br><span class="line">        <span class="comment">//System.out.println(nums[k]+&quot;+&quot;);</span></span><br><span class="line">        <span class="keyword">if</span>(num[k]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(k&lt;num.length&amp;&amp;num[k]==num[k-<span class="number">1</span>])&#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i=k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=num.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">          <span class="keyword">int</span> sum=num[k]+num[i]+num[j];</span><br><span class="line">         <span class="comment">//System.out.println(sum);</span></span><br><span class="line">          <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">              j--;</span><br><span class="line">              <span class="keyword">while</span>(i&lt;j&amp;&amp;num[j]==num[j+<span class="number">1</span>])&#123;</span><br><span class="line">                  j--;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">              i++;</span><br><span class="line">              <span class="keyword">while</span>(i&lt;j&amp;&amp;num[i]==num[i-<span class="number">1</span>])&#123;</span><br><span class="line">                  i++;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              ArrayList&lt;Integer&gt; temp=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">              temp.add(num[k]);</span><br><span class="line">              temp.add(num[i]);</span><br><span class="line">              temp.add(num[j]);</span><br><span class="line">              res.add(temp);</span><br><span class="line">              i++;</span><br><span class="line">              <span class="keyword">while</span>(i&lt;j&amp;&amp;num[i]==num[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   i++;</span><br><span class="line">              &#125;</span><br><span class="line">              j--;</span><br><span class="line">              <span class="keyword">while</span>(i&lt;j&amp;&amp;num[j]==num[j+<span class="number">1</span>])&#123;</span><br><span class="line">                  j--;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目七"><a href="#题目七" class="headerlink" title="题目七"></a>题目七</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/container-with-most-water/">热题100-11. 盛最多水的容器</a></strong></p><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p></blockquote><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>设置双指针，分别指向数组的首尾元素；</p></li><li><p>比较两个指针所对应的数组值，下面分析怎么移动两边的指针：</p><p>容器能盛多少水由容器的短边决定，当我们移动长边时，下一次得到的容器容积一定小于当前容积，因为高度还是由这个短边决定，要么由更短的边决定，但是底边长减小了，所以容积一定减小；</p><p>当我们移动短边时，就有可能得到更长的边，得到更大的容积，所以每次移动较长的边</p></li></ul><h3 id="代码及注解-6"><a href="#代码及注解-6" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right=height.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> max=Math.min(height[left],height[right])*(right-left);</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(height[left]&lt;height[right])&#123;</span><br><span class="line">            max=Math.max(max, (right - left) * height[left]);</span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            max=Math.max(max, (right - left) * height[right]);</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目八"><a href="#题目八" class="headerlink" title="题目八"></a>题目八</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/trapping-rain-water/">热题100-42. 接雨水</a></strong></p><p>给定 <em>n</em> 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p></blockquote><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>设置双指针，分别指向数组的首尾元素；</p></li><li><p>比较两个指针所对应的数组值，下面分析怎么移动两边的指针：</p><p>容器能盛多少水由容器的短边决定，当我们移动长边时，下一次得到的容器容积一定小于当前容积，因为高度还是由这个短边决定，要么由更短的边决定，但是底边长减小了，所以容积一定减小；</p><p>当我们移动短边时，就有可能得到更长的边，得到更大的容积，所以每次移动较长的边</p></li></ul><h3 id="代码及注解-7"><a href="#代码及注解-7" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * max water</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr int整型一维数组 the array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long长整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">maxWater</span> <span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left_max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right_max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left_max&lt;right_max)&#123;</span><br><span class="line">                res+=Math.max(<span class="number">0</span>,left_max-arr[left]);</span><br><span class="line">                left_max=Math.max(left_max,arr[left]);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res+=Math.max(<span class="number">0</span>,right_max-arr[right]);</span><br><span class="line">                right_max=Math.max(right_max,arr[right]);</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目九"><a href="#题目九" class="headerlink" title="题目九"></a>题目九</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/palindrome-linked-list/">热题100-234. 回文链表</a></strong></p><p>请判断一个链表是否为回文链表。</p></blockquote><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>找到链表的中间节点midNode：</p><p>创建快慢指针</p><p>慢指针一次走一步</p><p>快指针一次走两步</p></li><li><p>从中间节点的后面反转链表</p></li><li><p>这样就得到了两段链表，分别遍历判断即可</p></li><li><p>最后将链表还原</p></li></ul><h3 id="代码及注解-8"><a href="#代码及注解-8" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 the head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPail</span> <span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode firstHead=head;</span><br><span class="line">        ListNode midNode=findMidNode(head);</span><br><span class="line">        ListNode secondHead=reverse(midNode.next);</span><br><span class="line">        ListNode temp=secondHead;</span><br><span class="line">        <span class="keyword">while</span>(firstHead!=<span class="keyword">null</span>&amp;&amp;secondHead!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(firstHead.val!=secondHead.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            firstHead=firstHead.next;</span><br><span class="line">            secondHead=secondHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        midNode.next=reverse(temp);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">findMidNode</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        ListNode fast=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        ListNode slow=<span class="keyword">null</span>;</span><br><span class="line">        ListNode fast=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode nextNode=fast.next;</span><br><span class="line">            fast.next=slow;</span><br><span class="line">            slow=fast;</span><br><span class="line">            fast=nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="LeetCode题解" scheme="http://wangjin1996219.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="其它" scheme="http://wangjin1996219.github.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2021-03-25T08:47:41.000Z</published>
    <updated>2021-03-25T08:47:41.241Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2021-03-25T08:46:52.000Z</published>
    <updated>2021-03-25T08:46:52.930Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2021-03-25T08:46:12.000Z</published>
    <updated>2021-03-25T08:46:12.835Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-03-25T08:45:06.000Z</published>
    <updated>2021-03-25T08:45:06.429Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>二分搜索</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/</id>
    <published>2021-03-25T08:44:42.000Z</published>
    <updated>2021-03-25T08:44:42.237Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>栈和队列</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2021-03-25T08:44:20.000Z</published>
    <updated>2021-03-25T08:44:20.067Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://wangjin1996219.github.io/2021/03/25/%E9%93%BE%E8%A1%A8/"/>
    <id>http://wangjin1996219.github.io/2021/03/25/%E9%93%BE%E8%A1%A8/</id>
    <published>2021-03-25T08:44:01.000Z</published>
    <updated>2021-03-28T14:49:52.549Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="·-链表相关的核心点"><a href="#·-链表相关的核心点" class="headerlink" title="· 链表相关的核心点"></a>· 链表相关的核心点</h1><ul><li>null/nil 异常处理</li><li>dummy node 哑巴节点</li><li>快慢指针</li><li>插入一个节点到排序链表</li><li>从一个链表中移除一个节点</li><li>翻转链表</li><li>合并两个链表</li><li>找到链表的中间节点</li></ul><h1 id="·-相关题目"><a href="#·-相关题目" class="headerlink" title="· 相关题目"></a>· 相关题目</h1><h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><blockquote><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/"><strong>热题100-21.合并两个有序链表</strong></a></p><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>设置一个哑结点res，方便返回结果</li><li>循环比较两个链表中的节点，循环条件是两个链表指向的节点不为null，head指向数值较小的节点</li><li>循环结束的条件实际是有一个链表遍历结束，再让head.next指向没有遍历完的链表即可</li></ul><h3 id="代码及注解"><a href="#代码及注解" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode res=<span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode head=res;</span><br><span class="line">    <span class="keyword">while</span>(l1!=<span class="keyword">null</span>&amp;&amp;l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1.val&lt;=l2.val)&#123;</span><br><span class="line">           head.next=l1;</span><br><span class="line">           l1=l1.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           head.next=l2;</span><br><span class="line">           l2=l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        head=head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    head.next= l1==<span class="keyword">null</span>?l2:l1;<span class="comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span></span><br><span class="line">    <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><blockquote><p><strong><a href="https://leetcode-cn.com/problems/reverse-linked-list/">热题100-206. 反转链表</a></strong></p><p>输入一个链表，将它反转后返回头结点。</p></blockquote><h3 id="代码及注解-1"><a href="#代码及注解-1" class="headerlink" title="代码及注解"></a>代码及注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode preNode=<span class="keyword">null</span>;</span><br><span class="line">    ListNode curNode=head;</span><br><span class="line">    ListNode nextNode=head;</span><br><span class="line">    <span class="keyword">while</span>(nextNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         nextNode=curNode.next;</span><br><span class="line">         curNode.next=preNode;</span><br><span class="line">         preNode=curNode;</span><br><span class="line">         curNode=nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="LeetCode题解" scheme="http://wangjin1996219.github.io/categories/LeetCode%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="数据结构篇" scheme="http://wangjin1996219.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-项目升级</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7/</id>
    <published>2021-03-24T14:57:46.000Z</published>
    <updated>2021-03-24T14:57:46.423Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-阿里云远程部署及远程微信开发调试</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%BF%9C%E7%A8%8B%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/</id>
    <published>2021-03-24T14:57:08.000Z</published>
    <updated>2021-03-31T15:28:37.069Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="1-1阿里云初始化与执行环境安装"><a href="#1-1阿里云初始化与执行环境安装" class="headerlink" title="1.1阿里云初始化与执行环境安装"></a>1.1阿里云初始化与执行环境安装</h1><h2 id="1-1-1阿里云部署Java网站和微信开发调试心得技巧（上）"><a href="#1-1-1阿里云部署Java网站和微信开发调试心得技巧（上）" class="headerlink" title="1.1.1阿里云部署Java网站和微信开发调试心得技巧（上）"></a>1.1.1阿里云部署Java网站和微信开发调试心得技巧（上）</h2><ol><li>申请阿里云服务器</li><li>搭建出程序的执行环境</li><li>在服务器上发布并运行自己的web project</li><li>域名解析</li><li>微信测试号的申请与连接以获取微信用户信息</li></ol><h3 id="1-1-1-1申请阿里云服务器"><a href="#1-1-1-1申请阿里云服务器" class="headerlink" title="1.1.1.1申请阿里云服务器"></a><strong>1.1.1.1申请阿里云服务器</strong></h3><p> （1）PC访问阿里云<a href="https://www.aliyun.com/%EF%BC%8C%E7%94%B3%E8%AF%B7%E9%98%BF%E9%87%8C%E4%BA%91%E5%B8%90%E5%8F%B7%EF%BC%88%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%82%A8%E7%9A%84%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B8%90%E5%8F%B7%E7%99%BB%E5%BD%95%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B8%90%E5%8F%B7%E5%B7%B2%E7%BB%8F%E8%BF%9B%E8%A1%8C%E4%BA%86%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81%EF%BC%8C%E4%BD%BF%E7%94%A8%E8%B5%B7%E6%9D%A5%E6%9B%B4%E6%96%B9%E4%BE%BF%EF%BC%89%E5%B9%B6%E7%99%BB%E5%BD%95">https://www.aliyun.com/，申请阿里云帐号（可以用您的支付宝帐号登录，因为支付宝帐号已经进行了实名认证，使用起来更方便）并登录</a><br> （2）找到云服务器ECS购买页面（页面展现随时会变，当前为全部导航-&gt;产品-&gt;弹性计算-&gt;云服务器ECS-&gt;选择自己需要的型号(我选择的是入门级)），购买云服务器，这里主要有三种方式：9块9的学生服务器（大家如果不是学生的话可以用还在读大学的小伙伴的学生证来薅羊毛，购买）、包年包月的服务器（不管你怎么使用，按年按月收费）还有按量付费的服务器（按小时计费，不用可以随时注销掉）<br><img src="http://img1.sycdn.imooc.com/59da2e00000182cc24921486.png" alt="图片描述"><br> 操作系统记得选择centos,这里我用的是最新的7.3版本<br><img src="http://img1.sycdn.imooc.com/59da2e4e0001282423901122.png" alt="图片描述"><br> 上半部分的安全设置里面需要填写上root的登录密码，以后咱们需要用这个root帐号来远程登录服务器去做部署，下半部分主要显示的是您选择的阿里云清单<br><img src="http://img1.sycdn.imooc.com/59da2e7d0001b61723841066.png" alt="图片描述"><br> 开通成功后，服务器会启动并运行，同时会自动分配一个公网IP，咱们外网就可以通过这个公网IP访问服务器，同时也可以将域名解析到这个服务器中。<br><img src="http://img1.sycdn.imooc.com/59da2ea10001283b25420984.png" alt="图片描述"><br> 这里翔仔的公网IP为47.104.1.235</p><h3 id="1-1-1-2搭建程序的执行环境"><a href="#1-1-1-2搭建程序的执行环境" class="headerlink" title="1.1.1.2搭建程序的执行环境"></a><strong>1.1.1.2搭建程序的执行环境</strong></h3><p> 搭建程序的执行环境，咱们先列一下常用的执行环境清单：<br> （1）    JDK(这里选择的是JDK1.8)<br> 下载地址为<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br> 选择的是jdk-8u144-linux-x64.rpm<br> （2）    Tomcat 8<br> 下载地址为<br><a href="http://tomcat.apache.org/download-80.cgi#8.0.46">http://tomcat.apache.org/download-80.cgi#8.0.46</a><br> 选择的是apache-tomcat-8.0.46.tar.gz<br> （3）    Mysql(这里选择的是Mysql5.7)repo源，后通过centos自带的yum安装<br> 下载的地址为<br><a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a><br> 这里选择mysql57-community-release-el7-11.noarch.rpm<br> （4）    Redis(可选，最好预先安装上，这里选择的版本为4.0.2)<br> 下载地址为<br><a href="https://redis.io/download">https://redis.io/download</a><br> 这里选择redis-4.0.2.tar.gz<br> 将上面的软件都下载到本地，并上传到服务器(如果您的系统为MAC或LINUX，直接使用SCP命令行上传，具体指令可以查询网上，如果您的系统为WIN，推荐使用filezilla可视化上传工具上传)，或者您也可以直接登录服务器，wget+ftp地址直接下载这些软件；同时需要大家注意的是，我们在服务器上部署了数据库之后，需要往数据库里面去补充数据，我们的线上数据访问的是线上的数据库而非本地的数据库。图片包也需要上传到服务器并通过配置server.xml确保能读取到这些图片（前提是docBase配置上的路径已经在服务器上创建）<br><img src="http://img1.sycdn.imooc.com/59da2edf0001118319361120.png" alt="图片描述"><br> 可以在阿里云控制台进入终端<br><img src="http://img1.sycdn.imooc.com/59da2f3c0001925208650121.png" alt="图片描述"><br> 在服务器的终端，正确的情况下就能看到这些软件了。<br><img src="http://img1.sycdn.imooc.com/59da2f5600011a9419040246.png" alt="图片描述"><br> 接下来开始安装这些软件：</p><p><strong>安装JDK</strong><br> Java程序需要运行在JRE里边，因此咱们需要安装JDK，在软件路径里执行<br> //添加可执行权限<br> chmod +x jdk-8u144-linux-x64.rpm<br> //安装RPM软件包<br> rpm -ivh jdk-8u144-linux-x64.rpm<br> //查看<a href="https://coding.imooc.com/?c=java">java</a>的版本信息，若出现版本信息则成功<br> <a href="https://coding.imooc.com/?c=java">java</a> –version<br><img src="http://img1.sycdn.imooc.com/59da2f6c0001f46a19061000.png" alt="图片描述"></p><p><strong>安装Mysql</strong><br> 安装用来配置mysql的yum源的rpm包<br> rpm -Uvh mysql57-community-release-el7-11.noarch.rpm<br> 安装Mysql<br> yum install mysql-community-server<br><img src="http://img1.sycdn.imooc.com/59da2fdf0001c0d408650502.png" alt="图片描述"><br> 开启mysql服务<br> service mysqld start<br><img src="http://img1.sycdn.imooc.com/59da2ffa0001edd619340382.png" alt="图片描述"><br> mysql安装成功后创建的超级用户’root’@‘localhost’的密码会被存储在/var/log/mysqld.log，可以使用如下命令查看密码<br> grep ‘temporary password’ /var/log/mysqld.log<br><img src="http://img1.sycdn.imooc.com/59da301d0001785925080182.png" alt="图片描述"><br> 使用mysql生成的’root’@‘localhost’用户和密码登录数据库，并修改 其密码，具体命令<br> mysql -uroot -p<br> ALTER USER ‘root’@‘localhost’ IDENTIFIED BY ‘Xiangze230!’;<br><img src="http://img1.sycdn.imooc.com/59da30390001bba520861422.png" alt="图片描述"><br> 开启远程连接<br> 通过阿里云控制台开放3306端口<br> 在阿里云控制台咱们的实例页面下面选择安全组-&gt;配置规则<br><img src="http://img1.sycdn.imooc.com/59da30620001aaff25221452.png" alt="图片描述"><br> 进入到规则配置页面之后，咱们可以看到目前只有22端口和3389端口支持远程访问，咱们还需要额外开通80端口（微信公众号用），3306端口(mysql)以及6379端口(redis)<br><img src="http://img1.sycdn.imooc.com/59da30760001f73125541440.png" alt="图片描述"><br> 配置一个支持远程登录的帐号，这里配置一个work帐号<br> mysql -u root -p<br> use mysql;<br> grant SELECT,UPDATE,INSERT,DELETE on <em>.</em> to ‘work’@’%’ identified by ‘Xiangze230!’;//创建work帐号并授权，同时设置密码<br> flush privileges;//生效配置<br> 之后便能在我们本地通过调用mysql指令远程登录阿里云服务器上的mysql server中，<br> mysql -uwork -P3306 -h47.104.1.235 –p //本机远程登录mysql指令<br><img src="http://img1.sycdn.imooc.com/59da309400012e1f19880836.png" alt="图片描述"></p><p>安装redis<br> redis安装真的特别简单，首先先解压redis安装包<br> tar -zxvf redis-4.0.2.tar.gz<br> 设置redis以支持远程登录<br> vi redis-4.0.2/redis.conf<br> 将bind 127.0.0.1这句话用井号注释掉，这样就能支持远程连接了<br><img src="http://img1.sycdn.imooc.com/59da30d50001a68521601362.png" alt="图片描述"><br> <strong>此外，还需要给redis.conf添加配置以支持redis作为守护进程一直跑在后台</strong><br> 需要加入『daemonize yes』<br><img src="http://img1.sycdn.imooc.com/59da313000013ead08650187.png" alt="图片描述"><br> 安装redis<br> 去到解压后的目录里<br> cd redis-4.0.2<br> make  //安装redis<br> 启动redis服务<br> src/redis-server redis.conf<br><img src="http://img1.sycdn.imooc.com/59da314a0001d36125400270.png" alt="图片描述"><br> redis连接测试<br> 通过redis-cli连接到redis服务器<br> src/redis-cli<br> 当输入ping 得到pong的回应之后，证明redis配置已经完成<br><img src="http://img1.sycdn.imooc.com/59da316b0001170217480234.png" alt="图片描述"><br> 4．安装tomcat 8<br> tomcat 8的安装更为简单<br> 解压tomcat压缩包<br> tar -zxvf apache-tomcat-8.0.46.tar.gz<br> 启动tomcat<br> ./apache-tomcat-8.0.46/bin/startup.sh<br><img src="http://img1.sycdn.imooc.com/59da31850001020825280504.png" alt="图片描述"></p><h3 id="1-1-1-3在服务器上发布并运行自己的web-project"><a href="#1-1-1-3在服务器上发布并运行自己的web-project" class="headerlink" title="1.1.1.3在服务器上发布并运行自己的web project"></a><strong>1.1.1.3在服务器上发布并运行自己的web project</strong></h3><p> 修改tomcat默认启动端口，从8080修改为80端口，便于微信登录<br> vi apache-tomcat-8.0.46/conf/server.xml<br><img src="http://img1.sycdn.imooc.com/59da31960001a44d21681462.png" alt="图片描述"><br> 重启tomcat<br> ./apache-tomcat-8.0.46/bin/shutdown.sh<br> ./apache-tomcat-8.0.46/bin/startup.sh<br> 修改自己本地的网站的配置<br> 这里由于大家自己的<a href="https://coding.imooc.com/?c=java">java</a>网站项目的配置都不相同，只能说大概的，即把项目里的mysql配置(如果有的话)，redis配置(如果有的话)修改为阿里云服务器对应的配置(即ip，端口，密码等配置修改成服务器里安装好的这些软件的对应的配置)<br><img src="http://img1.sycdn.imooc.com/59da31b100014ae324660598.png" alt="图片描述"><br> 打出自己项目的war包<br><img src="http://img1.sycdn.imooc.com/59da31c30001ed4024681500.png" alt="图片描述"><br><img src="http://img1.sycdn.imooc.com/59da31ce0001be2c08650907.png" alt="图片描述"><br><img src="http://img1.sycdn.imooc.com/59da31db0001cb4808650907.png" alt="图片描述"><br> 将export出来的war包上传到服务器tomcat的webapps目录下<br> scp o2o.war <a href="mailto:root@47.104.1.235">root@47.104.1.235</a>:/root/apache-tomcat-8.0.46/webapps<br><img src="http://img1.sycdn.imooc.com/59da32070001e2d708640065.png" alt="图片描述"><br> 上传成功后，没过几秒tomcat便会在webapps目录下自动从项目war包中解析出项目工程目录来<br><img src="http://img1.sycdn.imooc.com/59da32220001dc1008650056.png" alt="图片描述"><br> 之后通过ip+请求路径的形式便能访问到自己的项目(因为已经设置成80端口，这是http默认访问的端口，所以不需要在URL里添加端口信息了)<br><img src="http://img1.sycdn.imooc.com/59da324a000107b108650519.png" alt="图片描述"></p><h3 id="1-1-1-4域名解析"><a href="#1-1-1-4域名解析" class="headerlink" title="1.1.1.4域名解析"></a><strong>1.1.1.4域名解析</strong></h3><p> 如果通过ip连接微信号，则总会弹出烦人的警告窗口，因此咱们可以先购买一个域名并对域名进行认证(具体的备案步骤不同服务商有不同要求，大家可以按照他们的要求来，主要分有个人认证和企业认证两种，当然大家如果不嫌烦，可以直接用ip即跳过域名解析这一步)，建议大家看看周围的朋友有谁已经有经过验证的域名了，这样可以直接借他的域名创建一个二级域名来用，方便省事，翔仔购买的是阿里云控制台里面的万网域名，购买并认证成功后，会有如下截图，选择购买好的域名并点击解析创建出二级域名<br><img src="http://img1.sycdn.imooc.com/59da326600014ec708650260.png" alt="图片描述"><br> 进入到解析的页面，选择添加解析，并在A记录里面设置好O2O，IP里面设置咱们的阿里云服务器公网IP。这样就能创建出o2o.yitiaojieinfo.com这样的域名指向该公网IP<br><img src="http://img1.sycdn.imooc.com/59da32830001b76108650508.png" alt="图片描述"><br> 隔一段时间，大概5-10分钟这样子，通过域名访问咱们的站点，就能发现访问是okay的<br><img src="http://img1.sycdn.imooc.com/59da329d0001476708650543.png" alt="图片描述"></p><h1 id="1-1-2阿里云部署Java网站和微信开发调试心得技巧-下"><a href="#1-1-2阿里云部署Java网站和微信开发调试心得技巧-下" class="headerlink" title="1.1.2阿里云部署Java网站和微信开发调试心得技巧(下)"></a>1.1.2阿里云部署Java网站和微信开发调试心得技巧(下)</h1><h2 id="1-1-2-5微信测试号的申请与连接以获取微信用户信息"><a href="#1-1-2-5微信测试号的申请与连接以获取微信用户信息" class="headerlink" title="1.1.2.5微信测试号的申请与连接以获取微信用户信息"></a><strong>1.1.2.5微信测试号的申请与连接以获取微信用户信息</strong></h2><p> 在咱们自己的程序里面编写servlet以响应微信号<br> 在接下来的步骤中，我们将在测试号里面设置接口配置信息的URL，一经设置，微信公众号便会发请求到我们设置好的URL去，我们必须编写程序应答才能顺利连通微信公众号，因此咱们需要编写相应的响应程序<br> 需要编写两个类<br> 【SignUtil】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.o2o.util.weixin;</span><br><span class="line"></span><br><span class="line">import java.security.MessageDigest;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 微信请求校验工具类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SignUtil &#123;</span><br><span class="line">    &#x2F;&#x2F; 与接口配置信息中的Token要一致</span><br><span class="line">    private static String token &#x3D; &quot;myo2o&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 验证签名</span><br><span class="line">     * </span><br><span class="line">     * @param signature</span><br><span class="line">     * @param timestamp</span><br><span class="line">     * @param nonce</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static boolean checkSignature(String signature, String timestamp, String nonce) &#123;</span><br><span class="line">        String[] arr &#x3D; new String[] &#123; token, timestamp, nonce &#125;;</span><br><span class="line">        &#x2F;&#x2F; 将token、timestamp、nonce三个参数进行字典序排序</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        StringBuilder content &#x3D; new StringBuilder();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            content.append(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        MessageDigest md &#x3D; null;</span><br><span class="line">        String tmpStr &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            md &#x3D; MessageDigest.getInstance(&quot;SHA-1&quot;);</span><br><span class="line">            &#x2F;&#x2F; 将三个参数字符串拼接成一个字符串进行sha1加密</span><br><span class="line">            byte[] digest &#x3D; md.digest(content.toString().getBytes());</span><br><span class="line">            tmpStr &#x3D; byteToStr(digest);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        content &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F; 将sha1加密后的字符串可与signature对比，标识该请求来源于微信</span><br><span class="line">        return tmpStr !&#x3D; null ? tmpStr.equals(signature.toUpperCase()) : false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将字节数组转换为十六进制字符串</span><br><span class="line">     * </span><br><span class="line">     * @param byteArray</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String byteToStr(byte[] byteArray) &#123;</span><br><span class="line">        String strDigest &#x3D; &quot;&quot;;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            strDigest +&#x3D; byteToHexStr(byteArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return strDigest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将字节转换为十六进制字符串</span><br><span class="line">     * </span><br><span class="line">     * @param mByte</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String byteToHexStr(byte mByte) &#123;</span><br><span class="line">        char[] Digit &#x3D; &#123; &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39; &#125;;</span><br><span class="line">        char[] tempArr &#x3D; new char[2];</span><br><span class="line">        tempArr[0] &#x3D; Digit[(mByte &gt;&gt;&gt; 4) &amp; 0X0F];</span><br><span class="line">        tempArr[1] &#x3D; Digit[mByte &amp; 0X0F];</span><br><span class="line"></span><br><span class="line">        String s &#x3D; new String(tempArr);</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【WechatController】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.o2o.web.wechat;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import com.imooc.o2o.util.wechat.SignUtil;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">&#x2F;&#x2F;一会在设置的URL里面就设置上这个路由</span><br><span class="line">@RequestMapping(&quot;wechat&quot;)</span><br><span class="line">public class WechatController &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log &#x3D; LoggerFactory.getLogger(WechatController.class);</span><br><span class="line"></span><br><span class="line">    @RequestMapping(method &#x3D; &#123; RequestMethod.GET &#125;)</span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        log.debug(&quot;weixin get...&quot;);</span><br><span class="line">        &#x2F;&#x2F; 微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</span><br><span class="line">        String signature &#x3D; request.getParameter(&quot;signature&quot;);</span><br><span class="line">        &#x2F;&#x2F; 时间戳</span><br><span class="line">        String timestamp &#x3D; request.getParameter(&quot;timestamp&quot;);</span><br><span class="line">        &#x2F;&#x2F; 随机数</span><br><span class="line">        String nonce &#x3D; request.getParameter(&quot;nonce&quot;);</span><br><span class="line">        &#x2F;&#x2F; 随机字符串</span><br><span class="line">        String echostr &#x3D; request.getParameter(&quot;echostr&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败</span><br><span class="line">        PrintWriter out &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            out &#x3D; response.getWriter();</span><br><span class="line">            if (SignUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">                log.debug(&quot;weixin get success....&quot;);</span><br><span class="line">                out.print(echostr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (out !&#x3D; null)</span><br><span class="line">                out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后重新部署一版最新的程序</p><p>访问微信测试号登录页面，通过打开自己手机的微信，扫一扫登录<br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a><br><img src="https://img1.sycdn.imooc.com/59da332500011d0308650391.png" alt="图片描述"><br> 进入到测试号页面后，分别看到如下信息<br> 【测试号信息】<br> appID:开发者ID，是公众号开发识别码，配合开发者密码可以调用微信公众号接口，如获取微信昵称等<br> appsecret:开发者密码，是检验公众号开发者身份的密码，具有极高的安全性。切记不要把密码交给第三方开发者或者编写到代码里<br><img src="https://img1.sycdn.imooc.com/59da33380001aa6608650121.png" alt="图片描述"><br> 【接口配置信息】<br> URL: 是开发者用来接收微信消息和事件的接口URL<br> Token:由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）<br><img src="https://img1.sycdn.imooc.com/59da334f000153d408650159.png" alt="图片描述"><br> 【JS接口安全域名】<br> 域名：想调用jssdk(如想要通过微信公众号js接口获取地图等工具)必须得填写此域名，在此域名的范围内才能调用jssdk工具，注意这里必须是域名，不是带有http之类的URL，这里直接填写o2o.yitiaojieinfo.com<br><img src="https://img1.sycdn.imooc.com/59da336d0001ccc608650117.png" alt="图片描述"><br> 【测试号二维码】<br> 里面包含了测试号二维码以及已经关注了的用户信息<br><img src="https://img1.sycdn.imooc.com/59da33840001e2f508650283.png" alt="图片描述"><br> 【体验接口权限表】<br> 这里主要介绍【网页服务】里面的【网页帐号】<br> 网页帐号主要用来设置OAuth2.0里面的网页授权域名，用户在网页授权页同意授权给公众号后，微信会将授权数据传给一个回调页面，回调页面需在此域名下，以确保安全可靠。沙盒号回调地址支持域名和ip，正式公众号回调地址只支持域名。这里直接设置为o2o.yitiaojieinfo.com<br><img src="https://img1.sycdn.imooc.com/59da33e400010e7d08650549.png" alt="图片描述"><br><img src="https://img1.sycdn.imooc.com/59da340100017e1308650619.png" alt="图片描述"><br> 有不清楚的地方可以直接参考微信官方文档<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319</a><br> 接下来需要编写自己的程序以获取关注此公众号的用户信息<br> 需要编写5个类 WechatLoginController.<a href="https://coding.imooc.com/?c=java">java</a>，UserAccessToken.<a href="https://coding.imooc.com/?c=java">java</a>，WechatUser.<a href="https://coding.imooc.com/?c=java">java</a>，WechatUtil.<a href="https://coding.imooc.com/?c=java">java</a>以及MyX509TrustManager.<a href="https://coding.imooc.com/?c=java">java</a><br> 【WechatLoginController】主要用来获取已关注此微信号的用户信息并做相应处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.o2o.web.wechat;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import com.imooc.o2o.dto.UserAccessToken;</span><br><span class="line">import com.imooc.o2o.dto.WechatUser;</span><br><span class="line">import com.imooc.o2o.util.wechat.WeiXinUserUtil;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;wechatlogin&quot;)</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 获取关注公众号之后的微信用户信息的接口，如果在微信浏览器里访问</span><br><span class="line"> * https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorize?appid&#x3D;您的appId&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;o2o.yitiaojieinfo.com&#x2F;o2o&#x2F;wechatlogin&#x2F;logincheck&amp;role_type&#x3D;1&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;1#wechat_redirect</span><br><span class="line"> * 则这里将会获取到code,之后再可以通过code获取到access_token 进而获取到用户信息</span><br><span class="line"> * </span><br><span class="line"> * @author xiangze</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class WechatLoginController &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log &#x3D; LoggerFactory.getLogger(WechatLoginController.class);</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;logincheck&quot;, method &#x3D; &#123; RequestMethod.GET &#125;)</span><br><span class="line">    public String doGet(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        log.debug(&quot;weixin login get...&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取微信公众号传输过来的code,通过code可获取access_token,进而获取用户信息</span><br><span class="line">        String code &#x3D; request.getParameter(&quot;code&quot;);</span><br><span class="line">        &#x2F;&#x2F; 这个state可以用来传我们自定义的信息，方便程序调用，这里也可以不用</span><br><span class="line">        &#x2F;&#x2F; String roleType &#x3D; request.getParameter(&quot;state&quot;);</span><br><span class="line">        log.debug(&quot;weixin login code:&quot; + code);</span><br><span class="line">        WechatUser user &#x3D; null;</span><br><span class="line">        String openId &#x3D; null;</span><br><span class="line">        if (null !&#x3D; code) &#123;</span><br><span class="line">            UserAccessToken token;</span><br><span class="line">            try &#123;</span><br><span class="line">                &#x2F;&#x2F; 通过code获取access_token</span><br><span class="line">                token &#x3D; WeiXinUserUtil.getUserAccessToken(code);</span><br><span class="line">                log.debug(&quot;weixin login token:&quot; + token.toString());</span><br><span class="line">                &#x2F;&#x2F; 通过token获取accessToken</span><br><span class="line">                String accessToken &#x3D; token.getAccessToken();</span><br><span class="line">                &#x2F;&#x2F; 通过token获取openId</span><br><span class="line">                openId &#x3D; token.getOpenId();</span><br><span class="line">                &#x2F;&#x2F; 通过access_token和openId获取用户昵称等信息</span><br><span class="line">                user &#x3D; WeiXinUserUtil.getUserInfo(accessToken, openId);</span><br><span class="line">                log.debug(&quot;weixin login user:&quot; + user.toString());</span><br><span class="line">                request.getSession().setAttribute(&quot;openId&quot;, openId);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                log.error(&quot;error in getUserAccessToken or getUserInfo or findByOpenId: &quot; + e.toString());</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;todo begin&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        &#x2F;&#x2F; 前面咱们获取到openId后，可以通过它去数据库判断该微信帐号是否在我们网站里有对应的帐号了，</span><br><span class="line">        &#x2F;&#x2F; 没有的话这里可以自动创建上，直接实现微信与咱们网站的无缝对接。</span><br><span class="line">        &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;todo end&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        if (user !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取到微信验证的信息后返回到指定的路由（需要自己设定）</span><br><span class="line">            return &quot;frontend&#x2F;index&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【UserAccessToken】用户AccessToken实体类，用来接收accesstoken以及openid等信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.o2o.dto;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 用户授权token</span><br><span class="line"> * </span><br><span class="line"> * @author xiangze</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class UserAccessToken &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取到的凭证</span><br><span class="line">    @JsonProperty(&quot;access_token&quot;)</span><br><span class="line">    private String accessToken;</span><br><span class="line">    &#x2F;&#x2F; 凭证有效时间，单位：秒</span><br><span class="line">    @JsonProperty(&quot;expires_in&quot;)</span><br><span class="line">    private String expiresIn;</span><br><span class="line">    &#x2F;&#x2F; 表示更新令牌，用来获取下一次的访问令牌，这里没太大用处</span><br><span class="line">    @JsonProperty(&quot;refresh_token&quot;)</span><br><span class="line">    private String refreshToken;</span><br><span class="line">    &#x2F;&#x2F; 该用户在此公众号下的身份标识，对于此微信号具有唯一性</span><br><span class="line">    @JsonProperty(&quot;openid&quot;)</span><br><span class="line">    private String openId;</span><br><span class="line">    &#x2F;&#x2F; 表示权限范围，这里可省略</span><br><span class="line">    @JsonProperty(&quot;scope&quot;)</span><br><span class="line">    private String scope;</span><br><span class="line"></span><br><span class="line">    public String getAccessToken() &#123;</span><br><span class="line">        return accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAccessToken(String accessToken) &#123;</span><br><span class="line">        this.accessToken &#x3D; accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getExpiresIn() &#123;</span><br><span class="line">        return expiresIn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setExpiresIn(String expiresIn) &#123;</span><br><span class="line">        this.expiresIn &#x3D; expiresIn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getRefreshToken() &#123;</span><br><span class="line">        return refreshToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRefreshToken(String refreshToken) &#123;</span><br><span class="line">        this.refreshToken &#x3D; refreshToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getOpenId() &#123;</span><br><span class="line">        return openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOpenId(String openId) &#123;</span><br><span class="line">        this.openId &#x3D; openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getScope() &#123;</span><br><span class="line">        return scope;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setScope(String scope) &#123;</span><br><span class="line">        this.scope &#x3D; scope;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;accessToken:&quot; + this.getAccessToken() + &quot;,openId:&quot; + this.getOpenId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【WechatUser】微信用户实体类，用来接收昵称 openid等用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.o2o.dto;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 微信用户实体类</span><br><span class="line"> * </span><br><span class="line"> * @author xiangze</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class WechatUser implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * </span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final long serialVersionUID &#x3D; -4684067645282292327L;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; openId,标识该公众号下面的该用户的唯一Id</span><br><span class="line">    @JsonProperty(&quot;openid&quot;)</span><br><span class="line">    private String openId;</span><br><span class="line">    &#x2F;&#x2F; 用户昵称</span><br><span class="line">    @JsonProperty(&quot;nickname&quot;)</span><br><span class="line">    private String nickName;</span><br><span class="line">    &#x2F;&#x2F; 性别</span><br><span class="line">    @JsonProperty(&quot;sex&quot;)</span><br><span class="line">    private int sex;</span><br><span class="line">    &#x2F;&#x2F; 省份</span><br><span class="line">    @JsonProperty(&quot;province&quot;)</span><br><span class="line">    private String province;</span><br><span class="line">    &#x2F;&#x2F; 城市</span><br><span class="line">    @JsonProperty(&quot;city&quot;)</span><br><span class="line">    private String city;</span><br><span class="line">    &#x2F;&#x2F; 区</span><br><span class="line">    @JsonProperty(&quot;country&quot;)</span><br><span class="line">    private String country;</span><br><span class="line">    &#x2F;&#x2F; 头像图片地址</span><br><span class="line">    @JsonProperty(&quot;headimgurl&quot;)</span><br><span class="line">    private String headimgurl;</span><br><span class="line">    &#x2F;&#x2F; 语言</span><br><span class="line">    @JsonProperty(&quot;language&quot;)</span><br><span class="line">    private String language;</span><br><span class="line">    &#x2F;&#x2F; 用户权限，这里没什么作用</span><br><span class="line">    @JsonProperty(&quot;privilege&quot;)</span><br><span class="line">    private String[] privilege;</span><br><span class="line"></span><br><span class="line">    public String getOpenId() &#123;</span><br><span class="line">        return openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOpenId(String openId) &#123;</span><br><span class="line">        this.openId &#x3D; openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getNickName() &#123;</span><br><span class="line">        return nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNickName(String nickName) &#123;</span><br><span class="line">        this.nickName &#x3D; nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(int sex) &#123;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProvince() &#123;</span><br><span class="line">        return province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProvince(String province) &#123;</span><br><span class="line">        this.province &#x3D; province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCity() &#123;</span><br><span class="line">        return city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCity(String city) &#123;</span><br><span class="line">        this.city &#x3D; city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCountry() &#123;</span><br><span class="line">        return country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCountry(String country) &#123;</span><br><span class="line">        this.country &#x3D; country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getHeadimgurl() &#123;</span><br><span class="line">        return headimgurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHeadimgurl(String headimgurl) &#123;</span><br><span class="line">        this.headimgurl &#x3D; headimgurl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLanguage() &#123;</span><br><span class="line">        return language;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLanguage(String language) &#123;</span><br><span class="line">        this.language &#x3D; language;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String[] getPrivilege() &#123;</span><br><span class="line">        return privilege;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrivilege(String[] privilege) &#123;</span><br><span class="line">        this.privilege &#x3D; privilege;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;openId:&quot; + this.getOpenId() + &quot;,nikename:&quot; + this.getNickName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【WechatUtil】主要用来提交https请求给微信获取用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.o2o.util.wechat;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.ConnectException;</span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.HttpsURLConnection;</span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import javax.net.ssl.SSLSocketFactory;</span><br><span class="line">import javax.net.ssl.TrustManager;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonParseException;</span><br><span class="line">import com.fasterxml.jackson.databind.JsonMappingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.imooc.o2o.dto.UserAccessToken;</span><br><span class="line">import com.imooc.o2o.dto.WechatUser;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 微信工具类</span><br><span class="line"> * </span><br><span class="line"> * @author xiangze</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class WechatUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log &#x3D; LoggerFactory.getLogger(WechatUtil.class);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取UserAccessToken实体类</span><br><span class="line">     * </span><br><span class="line">     * @param code</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static UserAccessToken getUserAccessToken(String code) throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F; 测试号信息里的appId</span><br><span class="line">        String appId &#x3D; &quot;您的appId&quot;;</span><br><span class="line">        log.debug(&quot;appId:&quot; + appId);</span><br><span class="line">        &#x2F;&#x2F; 测试号信息里的appsecret</span><br><span class="line">        String appsecret &#x3D; &quot;您的appsecret&quot;;</span><br><span class="line">        log.debug(&quot;secret:&quot; + appsecret);</span><br><span class="line">        &#x2F;&#x2F; 根据传入的code,拼接出访问微信定义好的接口的URL</span><br><span class="line">        String url &#x3D; &quot;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;oauth2&#x2F;access_token?appid&#x3D;&quot; + appId + &quot;&amp;secret&#x3D;&quot; + appsecret</span><br><span class="line">                + &quot;&amp;code&#x3D;&quot; + code + &quot;&amp;grant_type&#x3D;authorization_code&quot;;</span><br><span class="line">        &#x2F;&#x2F; 向相应URL发送请求获取token json字符串</span><br><span class="line">        String tokenStr &#x3D; httpsRequest(url, &quot;GET&quot;, null);</span><br><span class="line">        log.debug(&quot;userAccessToken:&quot; + tokenStr);</span><br><span class="line">        UserAccessToken token &#x3D; new UserAccessToken();</span><br><span class="line">        ObjectMapper objectMapper &#x3D; new ObjectMapper();</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 将json字符串转换成相应对象</span><br><span class="line">            token &#x3D; objectMapper.readValue(tokenStr, UserAccessToken.class);</span><br><span class="line">        &#125; catch (JsonParseException e) &#123;</span><br><span class="line">            log.error(&quot;获取用户accessToken失败: &quot; + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (JsonMappingException e) &#123;</span><br><span class="line">            log.error(&quot;获取用户accessToken失败: &quot; + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;获取用户accessToken失败: &quot; + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if (token &#x3D;&#x3D; null) &#123;</span><br><span class="line">            log.error(&quot;获取用户accessToken失败。&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取WechatUser实体类</span><br><span class="line">     * </span><br><span class="line">     * @param accessToken</span><br><span class="line">     * @param openId</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static WechatUser getUserInfo(String accessToken, String openId) &#123;</span><br><span class="line">        &#x2F;&#x2F; 根据传入的accessToken以及openId拼接出访问微信定义的端口并获取用户信息的URL</span><br><span class="line">        String url &#x3D; &quot;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;userinfo?access_token&#x3D;&quot; + accessToken + &quot;&amp;openid&#x3D;&quot; + openId</span><br><span class="line">                + &quot;&amp;lang&#x3D;zh_CN&quot;;</span><br><span class="line">        &#x2F;&#x2F; 访问该URL获取用户信息json 字符串</span><br><span class="line">        String userStr &#x3D; httpsRequest(url, &quot;GET&quot;, null);</span><br><span class="line">        log.debug(&quot;user info :&quot; + userStr);</span><br><span class="line">        WechatUser user &#x3D; new WechatUser();</span><br><span class="line">        ObjectMapper objectMapper &#x3D; new ObjectMapper();</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 将json字符串转换成相应对象</span><br><span class="line">            user &#x3D; objectMapper.readValue(userStr, WechatUser.class);</span><br><span class="line">        &#125; catch (JsonParseException e) &#123;</span><br><span class="line">            log.error(&quot;获取用户信息失败: &quot; + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (JsonMappingException e) &#123;</span><br><span class="line">            log.error(&quot;获取用户信息失败: &quot; + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;获取用户信息失败: &quot; + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if (user &#x3D;&#x3D; null) &#123;</span><br><span class="line">            log.error(&quot;获取用户信息失败。&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 发起https请求并获取结果</span><br><span class="line">     * </span><br><span class="line">     * @param requestUrl</span><br><span class="line">     *            请求地址</span><br><span class="line">     * @param requestMethod</span><br><span class="line">     *            请求方式（GET、POST）</span><br><span class="line">     * @param outputStr</span><br><span class="line">     *            提交的数据</span><br><span class="line">     * @return json字符串</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String httpsRequest(String requestUrl, String requestMethod, String outputStr) &#123;</span><br><span class="line">        StringBuffer buffer &#x3D; new StringBuffer();</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 创建SSLContext对象，并使用我们指定的信任管理器初始化</span><br><span class="line">            TrustManager[] tm &#x3D; &#123; new MyX509TrustManager() &#125;;</span><br><span class="line">            SSLContext sslContext &#x3D; SSLContext.getInstance(&quot;SSL&quot;, &quot;SunJSSE&quot;);</span><br><span class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</span><br><span class="line">            &#x2F;&#x2F; 从上述SSLContext对象中得到SSLSocketFactory对象</span><br><span class="line">            SSLSocketFactory ssf &#x3D; sslContext.getSocketFactory();</span><br><span class="line"></span><br><span class="line">            URL url &#x3D; new URL(requestUrl);</span><br><span class="line">            HttpsURLConnection httpUrlConn &#x3D; (HttpsURLConnection) url.openConnection();</span><br><span class="line">            httpUrlConn.setSSLSocketFactory(ssf);</span><br><span class="line"></span><br><span class="line">            httpUrlConn.setDoOutput(true);</span><br><span class="line">            httpUrlConn.setDoInput(true);</span><br><span class="line">            httpUrlConn.setUseCaches(false);</span><br><span class="line">            &#x2F;&#x2F; 设置请求方式（GET&#x2F;POST）</span><br><span class="line">            httpUrlConn.setRequestMethod(requestMethod);</span><br><span class="line"></span><br><span class="line">            if (&quot;GET&quot;.equalsIgnoreCase(requestMethod))</span><br><span class="line">                httpUrlConn.connect();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 当有数据需要提交时</span><br><span class="line">            if (null !&#x3D; outputStr) &#123;</span><br><span class="line">                OutputStream outputStream &#x3D; httpUrlConn.getOutputStream();</span><br><span class="line">                &#x2F;&#x2F; 注意编码格式，防止中文乱码</span><br><span class="line">                outputStream.write(outputStr.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 将返回的输入流转换成字符串</span><br><span class="line">            InputStream inputStream &#x3D; httpUrlConn.getInputStream();</span><br><span class="line">            InputStreamReader inputStreamReader &#x3D; new InputStreamReader(inputStream, &quot;utf-8&quot;);</span><br><span class="line">            BufferedReader bufferedReader &#x3D; new BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">            String str &#x3D; null;</span><br><span class="line">            while ((str &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                buffer.append(str);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            inputStreamReader.close();</span><br><span class="line">            &#x2F;&#x2F; 释放资源</span><br><span class="line">            inputStream.close();</span><br><span class="line">            inputStream &#x3D; null;</span><br><span class="line">            httpUrlConn.disconnect();</span><br><span class="line">            log.debug(&quot;https buffer:&quot; + buffer.toString());</span><br><span class="line">        &#125; catch (ConnectException ce) &#123;</span><br><span class="line">            log.error(&quot;Weixin server connection timed out.&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;https request error:&#123;&#125;&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【MyX509TrustManager】主要继承X509TrustManager做https证书信任管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.imooc.o2o.util.wechat;</span><br><span class="line"></span><br><span class="line">import java.security.cert.CertificateException;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.X509TrustManager;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 证书信任管理器（用于https请求）</span><br><span class="line"> * </span><br><span class="line"> * @author xiangze</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyX509TrustManager implements X509TrustManager &#123;</span><br><span class="line"></span><br><span class="line">    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后重新打包一个新的war包并发布到服务器tomcat webapps目录下<br> 发布成功后，关注你自己的测试号(即扫描测试号的那个二维码)，然后在手机微信里面或者微信开发者工具里访问相应链接：<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=%E6%82%A8%E7%9A%84appid&amp;redirect_uri=http://o2o.yitiaojieinfo.com/o2o/wechatlogin/logincheck&amp;role_type=1&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=1#wechat_redirect">https://open.weixin.qq.com/connect/oauth2/authorize?appid=您的appid&amp;redirect_uri=http://o2o.yitiaojieinfo.com/o2o/wechatlogin/logincheck&amp;role_type=1&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=1#wechat_redirect</a><br><img src="https://img1.sycdn.imooc.com/59da34c500012aa908650494.png" alt="图片描述"><br> 之后查看日志信息，便能发现确实能够获取到用户的信息了<br><img src="https://img1.sycdn.imooc.com/59da34de0001a64308650182.png" alt="图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="校园商铺项目" scheme="http://wangjin1996219.github.io/categories/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="校园商铺1.0" scheme="http://wangjin1996219.github.io/tags/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1-0/"/>
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-前端展示系统</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-03-24T14:56:35.000Z</published>
    <updated>2021-03-24T14:56:35.153Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-商品模块</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%95%86%E5%93%81%E6%A8%A1%E5%9D%97/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%95%86%E5%93%81%E6%A8%A1%E5%9D%97/</id>
    <published>2021-03-24T14:55:59.000Z</published>
    <updated>2021-03-24T14:55:59.660Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-商品类别模块</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%A8%A1%E5%9D%97/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%A8%A1%E5%9D%97/</id>
    <published>2021-03-24T14:55:35.000Z</published>
    <updated>2021-03-24T14:55:35.729Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-店铺编辑和列表功能</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%BA%97%E9%93%BA%E7%BC%96%E8%BE%91%E5%92%8C%E5%88%97%E8%A1%A8%E5%8A%9F%E8%83%BD/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%BA%97%E9%93%BA%E7%BC%96%E8%BE%91%E5%92%8C%E5%88%97%E8%A1%A8%E5%8A%9F%E8%83%BD/</id>
    <published>2021-03-24T14:55:04.000Z</published>
    <updated>2021-03-31T15:28:33.395Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="1-1店铺信息编辑之Dao层开发"><a href="#1-1店铺信息编辑之Dao层开发" class="headerlink" title="1.1店铺信息编辑之Dao层开发"></a>1.1店铺信息编辑之Dao层开发</h1><h2 id="1-1-1ShopDao接口"><a href="#1-1-1ShopDao接口" class="headerlink" title="1.1.1ShopDao接口"></a>1.1.1ShopDao接口</h2><p><strong>新建queryByShopId方法：</strong>因为对店铺进行编辑之前，要先将店铺的信息查询出来</p><h2 id="1-1-2Mapper中实现queryByShopId方法"><a href="#1-1-2Mapper中实现queryByShopId方法" class="headerlink" title="1.1.2Mapper中实现queryByShopId方法"></a>1.1.2Mapper中实现queryByShopId方法</h2><p><strong>在Mapper中自定义返回类型：</strong></p><p>主要是复合类型的定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//resultMap type：自定义的Shop实体类</span><br><span class="line">//id：返回类型的名称</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.imooc.o2o.entity.Shop&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shopMap&quot;</span>&gt;</span></span><br><span class="line">        //id column：主键为shop_id，与数据库中列名一致</span><br><span class="line">        //property：与实体类中的成员变量名称一致</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;shop_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shopId&quot;</span> /&gt;</span></span><br><span class="line">//result column：与数据库中列名一致</span><br><span class="line">        //property：与实体类中的成员变量名称一致</span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;shop_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shopName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;shop_desc&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shopDesc&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;shop_addr&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shopAddr&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;shop_img&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shopImg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;priority&quot;</span> <span class="attr">property</span>=<span class="string">&quot;priority&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_edit_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastEditTime&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;enable_status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;enableStatus&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">property</span>=<span class="string">&quot;advice&quot;</span> /&gt;</span></span><br><span class="line">//复合类型，property：与实体类中的成员变量名称一致</span><br><span class="line">//通过area_id连接</span><br><span class="line">//javaType：该复合类型所对应的Java实体类</span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;area&quot;</span> <span class="attr">column</span>=<span class="string">&quot;area_id&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">javaType</span>=<span class="string">&quot;com.imooc.o2o.entity.Area&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;area_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaId&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;shopCategory&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">column</span>=<span class="string">&quot;shop_category_id&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">javaType</span>=<span class="string">&quot;com.imooc.o2o.entity.ShopCategory&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;shop_category_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shopCategoryId&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;shop_category_name&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">property</span>=<span class="string">&quot;shopCategoryName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;owner&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">javaType</span>=<span class="string">&quot;com.imooc.o2o.entity.PersonInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应的SQL语句：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByShopId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;shopMap&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">        //要选出的店铺信息</span><br><span class="line">s.shop_id,</span><br><span class="line">s.shop_name,</span><br><span class="line">s.shop_desc,</span><br><span class="line">s.shop_addr,</span><br><span class="line">s.phone,</span><br><span class="line">s.shop_img,</span><br><span class="line">s.priority,</span><br><span class="line">s.create_time,</span><br><span class="line">s.last_edit_time,</span><br><span class="line">s.enable_status,</span><br><span class="line">s.advice,</span><br><span class="line">        //要选出的区域信息</span><br><span class="line">a.area_id,</span><br><span class="line">a.area_name,</span><br><span class="line">        //要选出的店铺类别信息</span><br><span class="line">sc.shop_category_id,</span><br><span class="line">sc.shop_category_name</span><br><span class="line">FROM</span><br><span class="line">tb_shop s,</span><br><span class="line">tb_area a,</span><br><span class="line">tb_shop_category sc</span><br><span class="line">WHERE</span><br><span class="line">        //where子查询定义查询的条件，也就是与店铺中area_id和shop_category_id中相等的区域和类别信息</span><br><span class="line">s.area_id=a.area_id</span><br><span class="line">AND</span><br><span class="line">s.shop_category_id = sc.shop_category_id</span><br><span class="line">AND</span><br><span class="line">        //传入的参数也就是店铺Id</span><br><span class="line">s.shop_id=#&#123;shopId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-2店铺信息编辑之Service层的实现"><a href="#1-2店铺信息编辑之Service层的实现" class="headerlink" title="1.2店铺信息编辑之Service层的实现"></a>1.2店铺信息编辑之Service层的实现</h1><h2 id="1-2-1ShopService接口"><a href="#1-2-1ShopService接口" class="headerlink" title="1.2.1ShopService接口"></a>1.2.1ShopService接口</h2><p><strong>getByShopId方法：</strong></p><ul><li>返回shop实体类对象</li></ul><p><strong>modifyShop方法：</strong></p><ul><li>传入店铺和图片</li><li>更新店铺信息，包括对图片的处理</li><li>返回ShopExecution对象</li></ul><h2 id="1-2-2ShopServiceImpl实现方法"><a href="#1-2-2ShopServiceImpl实现方法" class="headerlink" title="1.2.2ShopServiceImpl实现方法"></a>1.2.2ShopServiceImpl实现方法</h2><p><strong>modifyShop方法：</strong></p><ol><li><p>判断是否需要处理图片</p><p>当有图片时，先调用工具类中的方法，将图片删除</p><p>调用添加图片的方法，将图片更新到数据库中</p></li><li><p>更新店铺信息</p><p>这里要用已经修改后的店铺（有最新的图片信息），而不是刚开始通过shopID查询的tempShop</p></li></ol><p>其中对于图片的处理需要工具类中加入方法deleteFileOrPath：</p><ul><li>先判断storePath是文件的路径还是目录的路径 如果storePath是文件的路径，直接删除该文件</li><li>如果storePath是目录的路径则删除该目录下的所有文件</li></ul><h1 id="1-3店铺信息编辑之Controller层实现"><a href="#1-3店铺信息编辑之Controller层实现" class="headerlink" title="1.3店铺信息编辑之Controller层实现"></a>1.3店铺信息编辑之Controller层实现</h1><h2 id="1-3-1getShopById方法的实现"><a href="#1-3-1getShopById方法的实现" class="headerlink" title="1.3.1getShopById方法的实现"></a>1.3.1getShopById方法的实现</h2><ul><li>创建modelMap用来接收返回结果</li><li>从request中获取shopId</li><li>通过调用Service层的getByShopId和getAreaList方法获取店铺信息及区域列表，将这些信息放入modelMap</li><li>操作成功：将成功信息放入modelMap</li><li>操作失败：将失败信息放入modelMap</li><li>操作异常：将异常信息放入modelMap</li><li>返回modelMap</li></ul><h2 id="1-3-2modifyShop方法的实现"><a href="#1-3-2modifyShop方法的实现" class="headerlink" title="1.3.2modifyShop方法的实现"></a>1.3.2modifyShop方法的实现</h2><ul><li>创建modelMap用于将结果返回到前端</li><li>判断验证码信息</li></ul><p><strong>下面与注册店铺的逻辑基本相同</strong></p><ul><li><p>接收并转化相应的参数，包括店铺信息以及图片信息</p></li><li><p>修改店铺信息</p><p>店铺注册时图片信息不能为空</p><p>这里的图片信息是可以为空的，只对店铺内容更新即可</p></li></ul><h1 id="1-4店铺信息编辑之前端实现"><a href="#1-4店铺信息编辑之前端实现" class="headerlink" title="1.4店铺信息编辑之前端实现"></a>1.4店铺信息编辑之前端实现</h1><h2 id="1-4-1shopoperation-js文件修改"><a href="#1-4-1shopoperation-js文件修改" class="headerlink" title="1.4.1shopoperation.js文件修改"></a>1.4.1shopoperation.js文件修改</h2><ul><li><p>在common.js中添加getQueryString方法来获取ShopId</p></li><li><p>通过判断shopId是否为空来决定使用哪个功能</p><p>shopId=null：店铺注册</p><p>shopId！=null：修改店铺</p></li><li><p>创建两个Url：</p><p>shopInfoUrl：获取店铺信息（上面获取的shopId要拼接到这个Url中）</p><p>editShopUrl：修改店铺</p></li><li><p>这里的逻辑就是当shopId为空时，通过initUrl来获取店铺注册所需要的信息（区域列表、店铺类别等）</p><p>当shopId不为空时，通过shopInfoUrl来获取店铺信息，后面进行修改</p><p>同时，在ajax中也要判断shopId是否为空来决定将数据传送给后端的哪个controller方法</p></li></ul><h1 id="1-5店铺列表展示之Dao层的实现"><a href="#1-5店铺列表展示之Dao层的实现" class="headerlink" title="1.5店铺列表展示之Dao层的实现"></a>1.5店铺列表展示之Dao层的实现</h1><h2 id="1-5-1ShopDao接口"><a href="#1-5-1ShopDao接口" class="headerlink" title="1.5.1ShopDao接口"></a>1.5.1ShopDao接口</h2><p><strong>新建queryShopList方法：</strong>分页查询店铺，可输入的条件有：店铺名（模糊查询），店铺状态，店铺类别，区域Id，owner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询店铺，可输入的条件有：店铺名（模糊查询），店铺类别，区域Id，owner</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shopCondition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rowIndex      从第几行开始取数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize      返回的数据条数（从起始行算起）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Shop&gt; <span class="title">queryShopList</span><span class="params">(<span class="meta">@Param(&quot;shopCondition&quot;)</span> Shop shopCondition, <span class="meta">@Param(&quot;rowIndex&quot;)</span> <span class="keyword">int</span> rowIndex,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="keyword">int</span> pageSize)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>@Param标签：</strong>当方法中有多个参数时，需要用标签将不同的参数区分开</p></blockquote><p><strong>新建queryShopCount方法：</strong>返回查询的店铺总数，<strong>用来支持分页查询</strong></p><h2 id="1-5-2Mapper中实现queryShopList方法"><a href="#1-5-2Mapper中实现queryShopList方法" class="headerlink" title="1.5.2Mapper中实现queryShopList方法"></a>1.5.2Mapper中实现queryShopList方法</h2><p><strong>代码的逻辑就是在where子句中加入动态SQL，只要参数有值就会将多个参数组合起来查询</strong></p><p><strong>注意：</strong>对于商铺名称我们使用模糊查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;模糊查询用like ‘%xxx%’</span><br><span class="line">where s.shop_name like &#39;%要匹配的字符串%&#39;</span><br></pre></td></tr></table></figure><p>这里加入了分页查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按照权重从高到低排序后，按照传入的参数确定返回的数据条数</span><br><span class="line">ORDER BY</span><br><span class="line">s.priority DESC</span><br><span class="line">LIMIT #&#123;rowIndex&#125;,#&#123;pageSize&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryShopList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;shopMap&quot;</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">s.shop_id,</span><br><span class="line">s.shop_name,</span><br><span class="line">s.shop_desc,</span><br><span class="line">s.shop_addr,</span><br><span class="line">s.phone,</span><br><span class="line">s.shop_img,</span><br><span class="line">s.priority,</span><br><span class="line">s.create_time,</span><br><span class="line">s.last_edit_time,</span><br><span class="line">s.enable_status,</span><br><span class="line">s.advice,</span><br><span class="line">a.area_id,</span><br><span class="line">a.area_name,</span><br><span class="line">sc.shop_category_id,</span><br><span class="line">sc.shop_category_name</span><br><span class="line">FROM</span><br><span class="line">tb_shop s,</span><br><span class="line">tb_area a,</span><br><span class="line">tb_shop_category sc</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span></span></span><br><span class="line"><span class="tag"><span class="attr">test</span>=<span class="string">&quot;shopCondition.shopCategory != null and </span></span></span><br><span class="line"><span class="tag"><span class="string">shopCondition.shopCategory.shopCategoryId != null&quot;</span>&gt;</span></span><br><span class="line">and s.shop_category_id =</span><br><span class="line">#&#123;shopCondition.shopCategory.shopCategoryId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span></span></span><br><span class="line"><span class="tag"><span class="attr">test</span>=<span class="string">&quot;shopCondition.shopCategory != null </span></span></span><br><span class="line"><span class="tag"><span class="string">and shopCondition.shopCategory.parent!=null </span></span></span><br><span class="line"><span class="tag"><span class="string">and shopCondition.shopCategory.parent.shopCategoryId !=null&quot;</span>&gt;</span></span><br><span class="line">and s.shop_category_id in (select shop_category_id from</span><br><span class="line">tb_shop_category</span><br><span class="line">WHERE parent_id =</span><br><span class="line">#&#123;shopCondition.shopCategory.parent.shopCategoryId&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span></span></span><br><span class="line"><span class="tag"><span class="attr">test</span>=<span class="string">&quot;shopCondition.area != null and </span></span></span><br><span class="line"><span class="tag"><span class="string">shopCondition.area.areaId != null&quot;</span>&gt;</span></span><br><span class="line">and s.area_id =</span><br><span class="line">#&#123;shopCondition.area.areaId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;shopCondition.shopName != null&quot;</span>&gt;</span></span><br><span class="line">and s.shop_name like &#x27;%$&#123;shopCondition.shopName&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;shopCondition.enableStatus != null&quot;</span>&gt;</span></span><br><span class="line">and s.enable_status = #&#123;shopCondition.enableStatus&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span></span></span><br><span class="line"><span class="tag"><span class="attr">test</span>=<span class="string">&quot;shopCondition.owner != null and shopCondition.owner.userId != null&quot;</span>&gt;</span></span><br><span class="line">and s.owner_id = #&#123;shopCondition.owner.userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">AND</span><br><span class="line">s.area_id=a.area_id</span><br><span class="line">AND</span><br><span class="line">s.shop_category_id = sc.shop_category_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">ORDER BY</span><br><span class="line">s.priority DESC</span><br><span class="line">LIMIT #&#123;rowIndex&#125;,#&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-6店铺列表展示之Service层的实现"><a href="#1-6店铺列表展示之Service层的实现" class="headerlink" title="1.6店铺列表展示之Service层的实现"></a>1.6店铺列表展示之Service层的实现</h1><h2 id="1-6-1ShopService接口"><a href="#1-6-1ShopService接口" class="headerlink" title="1.6.1ShopService接口"></a>1.6.1ShopService接口</h2><p><strong>getShopList方法：</strong></p><ul><li>根据shopCondition分页返回相应店铺列表</li></ul><h2 id="1-6-2ShopServiceImpl实现方法"><a href="#1-6-2ShopServiceImpl实现方法" class="headerlink" title="1.6.2ShopServiceImpl实现方法"></a>1.6.2ShopServiceImpl实现方法</h2><p><strong>getShopList方法：</strong></p><p>这里获取店铺列表时，由于在数据库中我们只认行数，而在前端要转换成页数，因此要添加工具类，将行数转换成页码</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="校园商铺项目" scheme="http://wangjin1996219.github.io/categories/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="校园商铺1.0" scheme="http://wangjin1996219.github.io/tags/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1-0/"/>
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-主从库同步与读写分离</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%90%8C%E6%AD%A5%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%90%8C%E6%AD%A5%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</id>
    <published>2021-03-24T14:54:28.000Z</published>
    <updated>2021-03-31T07:14:49.401Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="1-1为什么要用主从同步，及其原理"><a href="#1-1为什么要用主从同步，及其原理" class="headerlink" title="1.1为什么要用主从同步，及其原理"></a>1.1为什么要用主从同步，及其原理</h1><p>在MySQL相关的文章里</p><h1 id="1-2主从同步数据库配置"><a href="#1-2主从同步数据库配置" class="headerlink" title="1.2主从同步数据库配置"></a>1.2主从同步数据库配置</h1><h2 id="1-2-1主服务器配置文件"><a href="#1-2-1主服务器配置文件" class="headerlink" title="1.2.1主服务器配置文件"></a>1.2.1主服务器配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//服务器id，必须唯一</span><br><span class="line">server-id=1</span><br><span class="line">//开启log-bin二进制日志</span><br><span class="line">log-bin=master-bin</span><br><span class="line">//开启索引</span><br><span class="line">log-bin-index=master-bin.index</span><br></pre></td></tr></table></figure><p><strong>重启主服务器：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p><strong>查看主服务器状态：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></table></figure><p><strong>创建repl账号：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user repl</span><br></pre></td></tr></table></figure><p><strong>给与使用repl账号登录的服务器的权限：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* TO &#39;repl&#39;@&#39;服务器IP&#39; IDENTIFIED BY &#39;mysql&#39;</span><br></pre></td></tr></table></figure><p><strong>刷新：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges</span><br></pre></td></tr></table></figure><h2 id="1-2-2从服务器配置文件"><a href="#1-2-2从服务器配置文件" class="headerlink" title="1.2.2从服务器配置文件"></a>1.2.2从服务器配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//服务器id，必须唯一</span><br><span class="line">server-id=2</span><br><span class="line">//开启relay-log二进制日志</span><br><span class="line">relay-log=slave-relay-bin</span><br><span class="line">//开启索引</span><br><span class="line">relay-log-index=slave-relay-bin.index</span><br><span class="line">//由于在同一台机器上，要修改端口号</span><br><span class="line">port=3305</span><br></pre></td></tr></table></figure><p><strong>重启从服务器：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p><strong>将master与slave联系起来：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用repl账号从主库的日志文件的位置开启同步</span><br><span class="line">change master to master_host&#x3D;&#39;主库IP&#39;,master_port&#x3D;3306,master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;mysql&#39;,master_log_file&#x3D;&#39;master-bin.000001&#39;,master_log_pos&#x3D;0;</span><br></pre></td></tr></table></figure><p><strong>开启从库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave</span><br></pre></td></tr></table></figure><p><strong>查看从服务器状态：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><h2 id="1-2-3数据库备份与导入"><a href="#1-2-3数据库备份与导入" class="headerlink" title="1.2.3数据库备份与导入"></a>1.2.3数据库备份与导入</h2><p><strong>备份数据库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将指定的数据库输出到指定的文件</span><br><span class="line">mysqldump -uroot -p o2o &gt; o2o.sql</span><br></pre></td></tr></table></figure><p><strong>引入备份的数据库：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;xx路径下的xx.sql文件</span><br><span class="line">source ~&#x2F;o2o.sql;</span><br></pre></td></tr></table></figure><h1 id="1-3代码层面读写分离的实现"><a href="#1-3代码层面读写分离的实现" class="headerlink" title="1.3代码层面读写分离的实现"></a>1.3代码层面读写分离的实现</h1><h2 id="1-3-1创建DynamicDataSource类"><a href="#1-3-1创建DynamicDataSource类" class="headerlink" title="1.3.1创建DynamicDataSource类"></a>1.3.1创建DynamicDataSource类</h2><p>创建DynamicDataSource类让它继承抽象类AbstractRoutingDataSource，重写determineCurrentLookupKey方法，实现不同数据源的选择：</p><h2 id="1-3-2创建DynamicDataSourceHolder类"><a href="#1-3-2创建DynamicDataSourceHolder类" class="headerlink" title="1.3.2创建DynamicDataSourceHolder类"></a>1.3.2创建DynamicDataSourceHolder类</h2><p><strong>引入ThreadLocal保证线程安全：</strong>维持线程封闭性的一种规范方法是使用ThreadLocal。它提供了set和get等访问方法，这些方法为每个使用该变量的线程都存有一份独立的副本，因此get方法总是返回由当前执行线程在调用set时设置的最新值。一个ThreadLocal在一个线程中是共享的，在不同线程之间又是隔离的”，每个线程都只能看到自己线程的值，这也就是<strong>ThreadLocal的核心作用：实现线程范围的局部变量。</strong><br><strong>getDbType方法：</strong>获取数据源类型</p><p><strong>setDbType方法：</strong>设置数据源类型</p><p>clearDBType方法：略</p><h2 id="1-3-3创建DynamicDataSourceInterceptor类"><a href="#1-3-3创建DynamicDataSourceInterceptor类" class="headerlink" title="1.3.3创建DynamicDataSourceInterceptor类"></a>1.3.3创建DynamicDataSourceInterceptor类</h2><p>DynamicDataSourceHolder这个类决定返回的数据源是master还是slave，这个类的初始化我们就需要借助DateSourceSelectInterceptor了，我们拦截所有的数据库操作请求，通过分析sql语句来判断是读还是写操作，读操作就给DynamicDataSourceHolder设置slave源，写操作就给其设置master源，代码如下：</p><ul><li><p>添加@Intercepts注解：说明要拦截的类型，其中update涵盖了增删改的操作</p></li><li><p>创建日志对象来输出显示使用数据源的类型</p></li><li><p>编写正则表达式：能够匹配的要用主库</p></li><li><p>intercept方法：</p><p>synchronizationActive：判断是不是事务</p><p>objects：获取传入对象的SQL语句参数</p><p>ms：接收参数的第一个值objects[0]，第一个值往往就是操作名称</p><p>lookupKey：保存数据源的类型</p><p><strong>判断不是事务管理：</strong></p><p>如果是SELECT方法，再去判断Mybatis是否调用了获取自增主键的方法，比如我们注册店铺根据<strong>选择的</strong>shopID生成图片地址，再将图片的地址插入到数据库，这个我们应该选择<strong>主库</strong>；</p><p>如果没有调用获取自增主键的方法，再将ms的第二个内容也就是SQL语句统一格式去匹配写好的正则表达式，如果能匹配上也要用<strong>主库</strong>，反之，匹配不上用从库。</p><p><strong>判断是事务管理：</strong></p><p>一般使用事务管理的都是写操作，我们使用主库</p><p>通过DynamicDataSourceHolder中的setDbType()方法最终决定使用哪个数据源</p><p>invocation.proceed()：程序继续执行</p></li><li><p>plugin方法：</p></li><li><p>setProperties方法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过拦截器，根据不同的SQL请求选择对应的数据源 select、query--选择读的数据源（slave）</span></span><br><span class="line"><span class="comment"> * updata、insert--选择写的数据源（master）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 王进</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts(&#123; @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123; MappedStatement.class, Object.class &#125;),</span></span><br><span class="line"><span class="meta">@Signature(type = Executor.class, method = &quot;query&quot;, args = &#123; MappedStatement.class, Object.class,</span></span><br><span class="line"><span class="meta">RowBounds.class, ResultHandler.class &#125;) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建日志对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DynamicDataSourceInterceptor.class);</span><br><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">&quot;.*insert\\u0020.*.*delete\\u0020.*.*updata\\u0020.*&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要的拦截方法，根据不同的情况去做拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// 判断是不是事务</span></span><br><span class="line"><span class="keyword">boolean</span> synchronizationActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line"><span class="comment">// 获取传入对象的SQL参数</span></span><br><span class="line">Object[] objects = invocation.getArgs();</span><br><span class="line">MappedStatement ms = (MappedStatement) objects[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 保存dataSourceType</span></span><br><span class="line">String lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line"><span class="keyword">if</span> (synchronizationActive != <span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">// 读方法</span></span><br><span class="line"><span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</span><br><span class="line"><span class="comment">// selectKey 为自增id查询主键（SELECT LAST_INSERT_ID()）方法，使用主库</span></span><br><span class="line"><span class="keyword">if</span> (ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) &#123;</span><br><span class="line">lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 替换SQL中所有的制表符、换行符为空格</span></span><br><span class="line">String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(<span class="string">&quot;[\\t\\n\\r]&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">// 用sql去匹配正则表达式，如果是insert、delete、updata使用主库</span></span><br><span class="line"><span class="keyword">if</span> (sql.matches(REGEX)) &#123;</span><br><span class="line">lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">lookupKey = DynamicDataSourceHolder.DB_SLAVE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 使用事务管理的都是写操作，使用主库</span></span><br><span class="line">lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">&#125;</span><br><span class="line">logger.debug(<span class="string">&quot;设置方法[&#123;&#125;] use [&#123;&#125;] Strategy,SqlCommandType [&#123;&#125;]..&quot;</span>, ms.getId(), lookupKey,</span><br><span class="line">ms.getSqlCommandType().name());</span><br><span class="line"><span class="comment">// 通过DynamicDataSourceHolder中的setDbType()方法最终决定使用哪个数据源</span></span><br><span class="line">DynamicDataSourceHolder.setDbType(lookupKey);</span><br><span class="line"><span class="keyword">return</span> invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) &#123;<span class="comment">// Mybatis中的Executor支持增删改查操作，发现对象中有这个对象，</span></span><br><span class="line"><span class="comment">// 要去调用intercept方法来决定使用哪个数据源</span></span><br><span class="line"><span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> target;<span class="comment">// 返回本体，不做拦截</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化时所做的相关配置（不必要）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-4Mybatis-config-xml中配置拦截器"><a href="#1-3-4Mybatis-config-xml中配置拦截器" class="headerlink" title="1.3.4Mybatis-config.xml中配置拦截器"></a>1.3.4Mybatis-config.xml中配置拦截器</h2><h2 id="1-3-5Spring-dao中重新配置datesource"><a href="#1-3-5Spring-dao中重新配置datesource" class="headerlink" title="1.3.5Spring-dao中重新配置datesource"></a>1.3.5Spring-dao中重新配置datesource</h2><p>将原来配置的连接池属性的bean设为抽象的并保留原先配置的属性，让id为master和slave的bean继承这些私有属性，而master和slave连接数据库的属性是不同的（url、密码等）：</p><p>这里已经更改了jdbc.properties文件，多了一个连接主库的变量：jdbc.master.url</p><p>配置动态数据源，创建DynamicDataSource类的对象dynamicDataSource，因为它继承了AbstractRoutingDataSource，所以它有一个成员变量targetDataSources是Map类型的，将定义好的两个bean加到这个成员变量中去；</p><p>因为数据源的选择只有在SQL语句执行时才会触发，所以引入一个类实现懒加载，将对象dynamicDataSource放到里面：</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="校园商铺项目" scheme="http://wangjin1996219.github.io/categories/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="校园商铺1.0" scheme="http://wangjin1996219.github.io/tags/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1-0/"/>
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-店铺注册功能模块</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%BA%97%E9%93%BA%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-%E5%BA%97%E9%93%BA%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/</id>
    <published>2021-03-24T14:53:53.000Z</published>
    <updated>2021-03-31T09:33:27.976Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="1-1Dao层之新增店铺"><a href="#1-1Dao层之新增店铺" class="headerlink" title="1.1Dao层之新增店铺"></a>1.1Dao层之新增店铺</h1><h2 id="1-1-1创建ShopDao接口"><a href="#1-1-1创建ShopDao接口" class="headerlink" title="1.1.1创建ShopDao接口"></a>1.1.1创建ShopDao接口</h2><p><strong>接口中仅包含一个方法：插入店铺</strong></p><h2 id="1-1-2创建ShopDao-xml文件"><a href="#1-1-2创建ShopDao-xml文件" class="headerlink" title="1.1.2创建ShopDao.xml文件"></a>1.1.2创建ShopDao.xml文件</h2><p><strong>useGeneratedKeys=”true”：</strong>使用自增主键，表示店铺插入成功之后，将该店铺的主键值返回，为了<strong>后续图片插入能与店铺对应</strong>起来</p><p>INSERT INTO中的参数名是与数据库o2o表中的<strong>列名</strong>一一对应的；VALUES中是与实体类中的<strong>成员变量</strong>对应的</p><h2 id="1-1-3ShopDao接口测试"><a href="#1-1-3ShopDao接口测试" class="headerlink" title="1.1.3ShopDao接口测试"></a>1.1.3ShopDao接口测试</h2><p>同区域查询测试方法差不多</p><h1 id="1-2Dao层之更新店铺"><a href="#1-2Dao层之更新店铺" class="headerlink" title="1.2Dao层之更新店铺"></a>1.2Dao层之更新店铺</h1><p><strong>因为本项目很多增删改查的内容，从本节开始，只记录与之前代码不一样的地方</strong></p><h2 id="1-2-1在ShopDao中加入更新方法"><a href="#1-2-1在ShopDao中加入更新方法" class="headerlink" title="1.2.1在ShopDao中加入更新方法"></a>1.2.1在ShopDao中加入更新方法</h2><h2 id="1-2-2在ShopDao-xml中实现更新方法"><a href="#1-2-2在ShopDao-xml中实现更新方法" class="headerlink" title="1.2.2在ShopDao.xml中实现更新方法"></a>1.2.2在ShopDao.xml中实现更新方法</h2><p><strong>这里使用了动态SQL：</strong></p><p>当需要更新不同内容的值时，如果不使用动态SQL就需要多个更新方法实现，所以这里使用动态SQL只更新传入的不为NULL的列值</p><p><strong>格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;xxx是实体类中对应的字段名，xxx_xxx是数据库中对应的字段名</span><br><span class="line">&lt;if test&#x3D;&quot;xxx !&#x3D;null&quot;&gt;xxx_xxx&#x3D;#&#123;xxx&#125;,&lt;&#x2F;if&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-3ShopDao接口测试"><a href="#1-2-3ShopDao接口测试" class="headerlink" title="1.2.3ShopDao接口测试"></a>1.2.3ShopDao接口测试</h2><h1 id="1-3Thumbnailator图片处理和封装Util"><a href="#1-3Thumbnailator图片处理和封装Util" class="headerlink" title="1.3Thumbnailator图片处理和封装Util"></a>1.3Thumbnailator图片处理和封装Util</h1><h2 id="1-3-1导入Thumbnailator相关的-jar包"><a href="#1-3-1导入Thumbnailator相关的-jar包" class="headerlink" title="1.3.1导入Thumbnailator相关的.jar包"></a>1.3.1导入Thumbnailator相关的.jar包</h2><p>通过pom.xml导入Thumbnailator相关的.jar包</p><h2 id="1-3-2创建PathUtil工具类"><a href="#1-3-2创建PathUtil工具类" class="headerlink" title="1.3.2创建PathUtil工具类"></a>1.3.2创建PathUtil工具类</h2><p><strong>方法一，获取图片根路径：</strong></p><ul><li>因为图片或者文件的处理要获取文件路径，所以创建一个工具类能够根据不同的系统获取文件的路径</li><li>用Seperator变量获取系统文件的分隔符</li><li>获取系统名称</li><li>根据不同的系统名称获取变量</li></ul><p><strong>方法二，获取相对子路径：</strong></p><ul><li>获取相对子路径并返回</li></ul><h2 id="1-3-3创建ImageUtil工具类"><a href="#1-3-3创建ImageUtil工具类" class="headerlink" title="1.3.3创建ImageUtil工具类"></a>1.3.3创建ImageUtil工具类</h2><p><strong>transferCommonsMultipartFileToFile方法：</strong>因为CommonsMultipartFile实现类只能通过前端的文件上传控件来初始化，而CommonsMultipartFile的构造方法中也不是用的File类的实例对象，因此将File类转换成CommonsMultipartFile是不现实的，InputStream类在我们对Service层进行junit测试时更便于初始化，因此要将CommonsMultipartFile转化成File类型</p><p>**==改进：==**如果图片类型为File类型，虽然方便我们做UT测试，但是controller调用时，每次都要讲InputStream转换成File类型，因此我们这里直接将类型从File类型装换成InputStream类型</p><p><strong>generateThumbnail方法：</strong></p><ul><li><p>先调用getRandomFileName方法得到一个随机的图片名称</p></li><li><p>再调用getFileExtension方法得到插入图片的扩展名称</p></li><li><p>调用makeDirPath方法创建目标路径</p></li><li><p>由targetAddr + realFileName + extension得到图片的<strong>相对路径</strong>地址</p><p>存为相对路径更有利于项目的移植，根路径可以通过getBasePath来获取</p></li></ul><p><strong>getRandomFileName方法：</strong>由随机生成的五位数还有当前的日期为插入的图片生成随机的文件名称</p><p><strong>getFileExtension方法：</strong>由传入图片名称的最后一个点为分隔，获取图片的扩展名</p><p><strong>makeDirPath方法：</strong>判断目标文件是否存在，如果不存在递归地生成该路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtil</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String basePath = Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ImageUtil.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将CommonsMultipartFile转换成File类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">transferCommonsMultipartFileToFile</span><span class="params">(CommonsMultipartFile cFile)</span> </span>&#123;</span><br><span class="line">File newFile = <span class="keyword">new</span> File(cFile.getOriginalFilename());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cFile.transferTo(newFile);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">logger.error(e.toString());</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">logger.error(e.toString());</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理缩略图，并返回新生成图片的相对值路径</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> thumbnail</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetAddr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateThumbnail</span><span class="params">(ImageHolder thumbnail, String targetAddr)</span> </span>&#123;</span><br><span class="line">String realFileName = getRandomFileName();</span><br><span class="line">String extension = getFileExtension(thumbnail.getImageName());</span><br><span class="line">makeDirPath(targetAddr);</span><br><span class="line">String relativeAddr = targetAddr + realFileName + extension;</span><br><span class="line">logger.debug(<span class="string">&quot;current relativeAddr is:&quot;</span> + relativeAddr);</span><br><span class="line">File dest = <span class="keyword">new</span> File(PathUtil.getImgBasePath() + relativeAddr);</span><br><span class="line">logger.debug(<span class="string">&quot;current complete addr is:&quot;</span> + PathUtil.getImgBasePath() + relativeAddr);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thumbnails.of(thumbnail.getImage()).size(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">.watermark(Positions.BOTTOM_RIGHT, ImageIO.read(<span class="keyword">new</span> File(<span class="string">&quot;D:\\GitHub\\index.jpg&quot;</span>)), <span class="number">0.25f</span>)</span><br><span class="line">.outputQuality(<span class="number">0.8f</span>).toFile(dest);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">logger.error(e.toString());</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> relativeAddr;<span class="comment">// 存为相对路径更有利于项目的移植，根路径可以通过getBasePath来获取</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建目标路径所涉及到的目录，即/home/work/wangjin/xxx.jpg,那么home work wangjin 这三个文件夹都得自动创建出来</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetAddr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeDirPath</span><span class="params">(String targetAddr)</span> </span>&#123;</span><br><span class="line">String realFileParentPath = PathUtil.getImgBasePath() + targetAddr;</span><br><span class="line">File dirPath = <span class="keyword">new</span> File(realFileParentPath);</span><br><span class="line"><span class="keyword">if</span> (!dirPath.exists()) &#123;</span><br><span class="line">dirPath.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取输入文件流的扩展名（jpg、pnm）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> thumbnail</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getFileExtension</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机文件名，用当前的年月日小时分钟秒钟+五位随机数来保证随机文件名不一样</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandomFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取随机的五位数</span></span><br><span class="line"><span class="keyword">int</span> rannum = r.nextInt(<span class="number">89999</span>) + <span class="number">10000</span>;</span><br><span class="line">String nowTimeStr = sDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="keyword">return</span> nowTimeStr + rannum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Thumbnails.of(<span class="keyword">new</span> File(<span class="string">&quot;D:\\GitHub\\xiaohuangren.jpg&quot;</span>)).size(<span class="number">1200</span>, <span class="number">1200</span>)</span><br><span class="line">.watermark(Positions.BOTTOM_RIGHT, ImageIO.read(<span class="keyword">new</span> File(<span class="string">&quot;D:\\GitHub\\index.jpg&quot;</span>)), <span class="number">0.25f</span>)</span><br><span class="line">.outputQuality(<span class="number">0.8f</span>).toFile(<span class="string">&quot;D:\\GitHub\\xintupian3.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-4Dto之ShopExecution的实现"><a href="#1-4Dto之ShopExecution的实现" class="headerlink" title="1.4Dto之ShopExecution的实现"></a>1.4Dto之ShopExecution的实现</h1><h2 id="1-4-1创建枚举类型来存储店铺的对应状态"><a href="#1-4-1创建枚举类型来存储店铺的对应状态" class="headerlink" title="1.4.1创建枚举类型来存储店铺的对应状态"></a>1.4.1创建枚举类型来存储店铺的对应状态</h2><ul><li><p>枚举实例：包括CHECK(0, “审核中”), OFFLINE(-1, “非法店铺”)类似的，需要什么状态就在这里添加，最后要用分号结束</p></li><li><p>定义两个私有的成员变量：状态和状态信息</p></li><li><p>定义构造方法：</p><p><strong>stateOf方法：</strong>根据传入的状态值返回相应的状态信息到前端</p></li></ul><h2 id="1-4-2创建ShopExecution类"><a href="#1-4-2创建ShopExecution类" class="headerlink" title="1.4.2创建ShopExecution类"></a>1.4.2创建ShopExecution类</h2><p><strong>成员变量：</strong></p><ul><li>状态值和状态信息：店铺插入成功或失败的返回信息</li><li>店铺数量</li><li>操作的店铺：存储当前操作的店铺</li><li>店铺列表：当查询店铺时，将查询结果存储到店铺列表中</li></ul><p><strong>构造方法：</strong></p><ul><li>店铺操作失败的时候使用的构造器：当操作失败时，仅将失败的信息赋值给ShopExecution对象的状态值和状态信息</li><li>店铺操作成功时候使用的构造器：当操作成功，除了返回状态信息外，还要将店铺赋值给ShopExecution对象的shop变量中</li><li>店铺操作成功时候使用的构造器：当操作成功时，将店铺的列表赋值给ShopExecution对象的shoplist变量中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopExecution</span> </span>&#123;</span><br><span class="line"><span class="comment">// 结果状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态标识(以文字的形式来解释state的状态)</span></span><br><span class="line"><span class="keyword">private</span> String stateInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 店铺的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作的shop（增删改店铺的时候用到）</span></span><br><span class="line"><span class="keyword">private</span> Shop shop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shop列表（查询店铺列表的时候使用）</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Shop&gt; shopList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShopExecution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个枚举类型中存储的是状态值，针对失败的时候去生成的ShopExecution对象，</span></span><br><span class="line"><span class="comment">//因此是店铺操作失败的时候使用的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShopExecution</span><span class="params">(ShopStateEnum stateEnum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = stateEnum.getState();</span><br><span class="line"><span class="keyword">this</span>.stateInfo = stateEnum.getStateInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 店铺操作成功时候使用的构造器，返回Shop对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShopExecution</span><span class="params">(ShopStateEnum stateEnum, Shop shop)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = stateEnum.getState();</span><br><span class="line"><span class="keyword">this</span>.stateInfo = stateEnum.getStateInfo();</span><br><span class="line"><span class="keyword">this</span>.shop = shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 店铺操作成功时候使用的构造器，返回ShopList对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShopExecution</span><span class="params">(ShopStateEnum stateEnum, List&lt;Shop&gt; shopList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = stateEnum.getState();</span><br><span class="line"><span class="keyword">this</span>.stateInfo = stateEnum.getStateInfo();</span><br><span class="line"><span class="keyword">this</span>.shopList = shopList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStateInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stateInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStateInfo</span><span class="params">(String stateInfo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stateInfo = stateInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.count = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Shop <span class="title">getShop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShop</span><span class="params">(Shop shop)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.shop = shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Shop&gt; <span class="title">getShopList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> shopList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShopList</span><span class="params">(List&lt;Shop&gt; shopList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.shopList = shopList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-5店铺注册之Service层的实现"><a href="#1-5店铺注册之Service层的实现" class="headerlink" title="1.5店铺注册之Service层的实现"></a>1.5店铺注册之Service层的实现</h1><h2 id="1-5-1创建ShopService接口"><a href="#1-5-1创建ShopService接口" class="headerlink" title="1.5.1创建ShopService接口"></a>1.5.1创建ShopService接口</h2><p><strong>只有一个addShop方法：</strong></p><h2 id="1-5-2创建ShopServiceImpl实现ShopService接口"><a href="#1-5-2创建ShopServiceImpl实现ShopService接口" class="headerlink" title="1.5.2创建ShopServiceImpl实现ShopService接口"></a>1.5.2创建ShopServiceImpl实现ShopService接口</h2><p><strong>addShop方法的实现：</strong></p><ul><li><p>通过@Transactional引入事务管理：因为该方法包括在数据库中存入店铺信息、插入图片等多个操作，其中一个操作不成功就要回滚</p></li><li><p>注入ShopDao实例</p></li><li><p>首先判断店铺是否为空</p><p>如果为空调用ShopExecution类中操作失败的构造器，将对应的状态赋值给ShopExecution对象</p><p>如果不为空，设置店铺的状态、创建时间和最近修改时间</p></li><li><p>调用ShopDao的insertShop方法：插入传入的对象</p><p>如果返回的影响行数小于等于0，说明店铺插入失败，通过ShopOperationException抛出异常信息</p><p><strong>注：</strong>ShopOperationException要继承RuntimeException类，只有这个类抛出异常信息时，才会回滚，普通的抛出异常信息不会</p></li><li><p>存储图片信息：</p><p>先判断图片的信息是否为空，空则抛出异常，不为空就调用addShopImg方法将图片信息插入</p></li><li><p>店铺和图片都插入成功之后，通过ShopExecution操作成功的构造方法，将店铺的状态和相应的店铺对象赋值给ShopExecution创建ShopExecution对象并返回该对象</p></li></ul><p><strong>addShopImg方法的实现：</strong></p><ul><li>通过shopId获取图片存储的相对值路径</li><li>调用ImageUtil工具类的generateThumbnail方法，得到图片的相对值路径，并赋值给相应的店铺ShopImg成员变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopServiceImpl</span> <span class="keyword">implements</span> <span class="title">ShopService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ShopServiceImpl.class);</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShopDao shopDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShopExecution <span class="title">addShop</span><span class="params">(Shop shop, ImageHolder thumbnail)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ShopOperationException </span>&#123;</span><br><span class="line"><span class="comment">// 空值判断，判断shop中是否包含必须的值</span></span><br><span class="line"><span class="keyword">if</span> (shop == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ShopExecution(ShopStateEnum.NULL_SHOP);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 给店铺信息赋初始值（状态为0，审核中；以及创建时间和最近修改时间）</span></span><br><span class="line">shop.setEnableStatus(<span class="number">0</span>);</span><br><span class="line">shop.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">shop.setLastEditTime(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 添加店铺信息：成功→else；失败→进入店铺创建失败</span></span><br><span class="line"><span class="keyword">int</span> effectedNum = shopDao.insertShop(shop);</span><br><span class="line"><span class="keyword">if</span> (effectedNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShopOperationException(<span class="string">&quot;店铺创建失败&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (thumbnail.getImage() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 存储图片(参数shop:根据shopId得到图片的地址，参数shopImg:保存到相应的地址中)</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">addShopImg(shop, thumbnail);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShopOperationException(<span class="string">&quot;addShopImg error:&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新店铺的图片地址</span></span><br><span class="line">effectedNum = shopDao.updateShop(shop);</span><br><span class="line"><span class="keyword">if</span> (effectedNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShopOperationException(<span class="string">&quot;更新图片地址失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ShopOperationException(<span class="string">&quot;addShop error:&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ShopExecution(ShopStateEnum.CHECK, shop);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addShopImg</span><span class="params">(Shop shop, ImageHolder thumbnail)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取shop图片目录的相对值路径</span></span><br><span class="line">String dest = PathUtil.getShopImagePath(shop.getShopId());</span><br><span class="line">String shopImgAddr = ImageUtil.generateThumbnail(thumbnail, dest);</span><br><span class="line">shop.setShopImg(shopImgAddr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-3创建ShopOperationException类"><a href="#1-5-3创建ShopOperationException类" class="headerlink" title="1.5.3创建ShopOperationException类"></a>1.5.3创建ShopOperationException类</h2><p><strong>该类对于RuntimeException做了一个简单的封装，用于更好地看出是程序的哪个类或者操作抛出的异常信息</strong></p><ul><li>该类继承了RuntimeException类（当该类抛出异常时，用事务管理的方法就会回滚）</li><li>只有一个构造方法</li><li>有一个序列化的ID</li></ul><h2 id="1-5-4Service层的测试"><a href="#1-5-4Service层的测试" class="headerlink" title="1.5.4Service层的测试"></a>1.5.4Service层的测试</h2><h1 id="1-6店铺注册功能之Controller层的实现"><a href="#1-6店铺注册功能之Controller层的实现" class="headerlink" title="1.6店铺注册功能之Controller层的实现"></a>1.6店铺注册功能之Controller层的实现</h1><ul><li><p>通过@Controller标签告诉spring该类为Controller类型</p></li><li><p>设置根路由为：/shopadmin</p></li><li><p>注入所需要的的实例对象</p></li><li><p>设置方法的路由为：/registershop</p></li><li><p>设置访问的方法为POST：向指定资源提交数据进行处理请求</p></li><li><p>registerShop方法的实现：（三部分）</p><p>方法传入的参数为：HttpServletRequest类型，url的请求头都会封装到该类的对象中，通过调用相关的方法就能获取传入的店铺相关的所有参数</p><p>返回类型为：Map类型，@ResponseBody标签将Map转换成json类型</p><p>创建modelMap用于保存方法的执行结果</p><p><strong>1.接收并转化相应的参数，包括店铺信息以及图片信息</strong></p><p>通过HttpServletRequestUtil中的getString方法，将request中key为shopStr对应的值转换成String，并用shopStr接收；</p><p>创建ObjectMapper对象，将json串转换成实体类shop</p><p>转换图片文件，创建文件上传解析器CommonsMultipartResolver，在request会话的上下文中获取文件信息，当CommonsMultipartResolver中的内容不为空，将request转换成MultipartHttpServletRequest类型的对象，再从multipartHttpServletRequest对象中取出shopImg变量的信息转换成CommonsMultipartFile，也就是spring能够处理的类型</p><p><strong>2.注册店铺</strong></p><p><strong>通过session获取店家信息：</strong>在登陆时，我们将user信息写入到session中，key设为user，这里从session中取出即可</p><p>当店铺和图片信息都不为空时，程序开始执行</p><p>从当前请求的request中取出user对应的owner信息</p><p>将CommonsMultipartFile类型的shopImg转换成InputStream，满足addShop方法参数要求</p><p>调用shopService中的addShop方法，将店铺和店铺图片封装成ShopExecution对象</p><p>将注册好的店铺插入到用户可操作的店铺列表中：在会话中取出用户可操作的店铺列表，没有就创建，有就取出，添加新店铺后，再将列表填入到session中</p><p><strong>3.返回结果</strong></p><p>将每步操作的执行结果放入modelMap，转换成json返回给前端</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shopadmin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopManagementController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShopService shopService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShopCategoryService shopCategoryService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AreaService areaService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/registershop&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">registerShop</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; modelMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="keyword">if</span> (!CodeUtil.checkVerifyCode(request)) &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">modelMap.put(<span class="string">&quot;errMsg&quot;</span>, <span class="string">&quot;输入了错误的验证码&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> modelMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.接收并转化相应的参数，包括店铺信息以及图片信息</span></span><br><span class="line">String shopStr = HttpServletRequestUtil.getString(request, <span class="string">&quot;shopStr&quot;</span>);</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Shop shop = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">shop = mapper.readValue(shopStr, Shop.class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">modelMap.put(<span class="string">&quot;errMsg&quot;</span>, e.getMessage());</span><br><span class="line"><span class="keyword">return</span> modelMap;</span><br><span class="line">&#125;</span><br><span class="line">CommonsMultipartFile shopImg = <span class="keyword">null</span>;</span><br><span class="line">CommonsMultipartResolver commonsMultipartResolver = <span class="keyword">new</span> CommonsMultipartResolver(</span><br><span class="line">request.getSession().getServletContext());</span><br><span class="line"><span class="keyword">if</span> (commonsMultipartResolver.isMultipart(request)) &#123;</span><br><span class="line">MultipartHttpServletRequest multipartHttpServletRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">shopImg = (CommonsMultipartFile) multipartHttpServletRequest.getFile(<span class="string">&quot;shopImg&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">modelMap.put(<span class="string">&quot;errMsg&quot;</span>, <span class="string">&quot;上传图片不能为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> modelMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.注册店铺</span></span><br><span class="line"><span class="keyword">if</span> (shop != <span class="keyword">null</span> &amp;&amp; shopImg != <span class="keyword">null</span>) &#123;</span><br><span class="line">PersonInfo owner = (PersonInfo) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">shop.setOwner(owner);</span><br><span class="line">ShopExecution se;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ImageHolder imageHolder = <span class="keyword">new</span> ImageHolder(shopImg.getOriginalFilename(), shopImg.getInputStream());</span><br><span class="line">se = shopService.addShop(shop, imageHolder);</span><br><span class="line"><span class="keyword">if</span> (se.getState() == ShopStateEnum.CHECK.getState()) &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 该用户可以操作的店铺列表</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">List&lt;Shop&gt; shopList = (List&lt;Shop&gt;) request.getSession().getAttribute(<span class="string">&quot;shopList&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (shopList == <span class="keyword">null</span> || shopList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">shopList = <span class="keyword">new</span> ArrayList&lt;Shop&gt;();</span><br><span class="line">&#125;</span><br><span class="line">shopList.add(se.getShop());</span><br><span class="line">request.getSession().setAttribute(<span class="string">&quot;shopList&quot;</span>, shopList);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">modelMap.put(<span class="string">&quot;errMsg&quot;</span>, se.getStateInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ShopOperationException e) &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">modelMap.put(<span class="string">&quot;errMsg&quot;</span>, e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">modelMap.put(<span class="string">&quot;errMsg&quot;</span>, e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modelMap;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">modelMap.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">modelMap.put(<span class="string">&quot;errMsg&quot;</span>, <span class="string">&quot;请输入店铺信息&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> modelMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-1创建工具类HttpServletRequestUtil"><a href="#1-6-1创建工具类HttpServletRequestUtil" class="headerlink" title="1.6.1创建工具类HttpServletRequestUtil"></a>1.6.1创建工具类HttpServletRequestUtil</h2><p><strong>HttpServletRequestUtil用于转换HttpServletRequest中的数据，传入一个key，将这个key对应的值转换成相应的数据类型的值。</strong></p><h1 id="1-9店铺注册之前端设计"><a href="#1-9店铺注册之前端设计" class="headerlink" title="1.9店铺注册之前端设计"></a>1.9店铺注册之前端设计</h1><h2 id="1-9-1SUI-Mobile介绍"><a href="#1-9-1SUI-Mobile介绍" class="headerlink" title="1.9.1SUI Mobile介绍"></a>1.9.1SUI Mobile介绍</h2><p>SUI Mobile 是一套基于 <a href="http://framework7.taobao.org/">Framework7</a> 开发的UI库。它非常轻量、精美，只需要引入我们的CDN文件就可以使用，并且能兼容到 iOS 6.0+ 和 Android 4.0+，非常适合开发跨平台Web App。</p><h2 id="1-9-2创建shopoperation-html页面"><a href="#1-9-2创建shopoperation-html页面" class="headerlink" title="1.9.2创建shopoperation.html页面"></a>1.9.2创建shopoperation.html页面</h2><p><strong>分段介绍shopoperation.html的作用：</strong></p><p><strong>1.表头提供设备方面的信息，能根据设备的属性来调整页面到适合设备的尺寸</strong></p><p><strong>2.表头之下引入css文件</strong></p><p>这里的css文件要在js静态资源之前，是因为在加载html页面时，我们要先生成页面的轮廓或者布局，再将静态资源填到页面中</p><p><strong>3.主体</strong></p><ul><li><strong>li标签：</strong>页面显示中的一些控件等，</li><li><strong>id：</strong>通过给这些控件加<strong>id</strong>命名，可以方便在js代码中对这些控件进行选中、响应或其他操作</li><li><strong>input type：</strong>控件的类型</li></ul><p><strong>4.结尾</strong></p><ul><li><strong>给出静态资源的位置，导入必要的.css文件和.js文件</strong></li></ul><h2 id="1-9-3创建ShopAdminController"><a href="#1-9-3创建ShopAdminController" class="headerlink" title="1.9.3创建ShopAdminController"></a>1.9.3创建ShopAdminController</h2><p>因为我们为了隐藏我们的项目结构，所以不能直接在url中体现我们shopoperation.html页面的位置，但是放在WEB-INF下外部是访问不到的，因此创建ShopAdminController根据url进行页面的转发：</p><p>这个返回的字符串再与spring-web中配置的前后缀拼接，得到页面的全路径</p><h2 id="1-9-4店铺注册之js实现"><a href="#1-9-4店铺注册之js实现" class="headerlink" title="1.9.4店铺注册之js实现"></a>1.9.4店铺注册之js实现</h2><p> 创建<strong>shopoperation.js文件</strong>，这个文件的功能为<strong>操作html页面</strong>：</p><ul><li>获取初始的信息，将一些信息填充到控件中</li><li>当我们点击提交时，获取表单的信息，并通过ajax将这个json对象传递到后端</li></ul><p>所有动作都是<strong>异步</strong>的，不影响用户的前端体验</p><p><strong>功能一的实现：</strong></p><ul><li><p>定义两个url：一个是获取店铺信息的url，另一个是注册店铺的url</p></li><li><p>方法getShopInitInfo：</p><p>通过获取店铺信息的url从后端获取区域和店铺列表数据data</p><p>如果json中key=success为true，开始遍历json中的区域和店铺信息，并将它们填充到html页面的相应控件中</p></li></ul><p><strong>功能二的实现：</strong></p><ul><li>从html页面的各个控件中选择其中的内容放到shop集合中，特殊的像区域和店铺类型要将用户的选择放到集合中</li></ul><ul><li>ajax将shop集合转换成json对象，通过注册店铺的url将这些数据返回到后端的方法中</li></ul><h1 id="1-10引入kaptcha实现验证码"><a href="#1-10引入kaptcha实现验证码" class="headerlink" title="1.10引入kaptcha实现验证码"></a>1.10引入kaptcha实现验证码</h1><h2 id="1-10-1引入kaptcha的jar包"><a href="#1-10-1引入kaptcha的jar包" class="headerlink" title="1.10.1引入kaptcha的jar包"></a>1.10.1引入kaptcha的jar包</h2><h2 id="1-10-2在web-xml中创建验证码的servlet"><a href="#1-10-2在web-xml中创建验证码的servlet" class="headerlink" title="1.10.2在web.xml中创建验证码的servlet"></a>1.10.2在web.xml中创建验证码的servlet</h2><p>servlet是运行在服务器上的一个小程序，用来处理服务器请求的</p><p><strong>每个servlet都要有映射！：</strong>如果不加映射，会找不到对应的servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet-name指向servlet的注册名称 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- url-pattern 设置servlet对外访问的路径（一定要加斜杠） --&gt;</span></span><br></pre></td></tr></table></figure><p>例如：这里对验证码这个servlet的请求为<a href="http://localhost:8080/o2o/Kaptcha%EF%BC%8C%E6%98%A0%E5%B0%84%E4%BC%9A%E7%94%B1/Kaptcha%E6%98%A0%E5%B0%84%E5%88%B0servlet%E7%9A%84%E6%B3%A8%E5%86%8C%E5%90%8D%E7%A7%B0Kaptcha%EF%BC%8C%E6%89%BE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81servlet">http://localhost:8080/o2o/Kaptcha，映射会由/Kaptcha映射到servlet的注册名称Kaptcha，找到对应的验证码servlet</a></p><h2 id="1-10-3在html中加入kaptcha控件"><a href="#1-10-3在html中加入kaptcha控件" class="headerlink" title="1.10.3在html中加入kaptcha控件"></a>1.10.3在html中加入kaptcha控件</h2><ul><li><strong>id：</strong>验证码控件的名称</li><li><strong>changeVerifyCode：</strong>自定义的一个方法，即点击本身更换验证码</li><li><strong>src：</strong>指定验证码的servlet</li></ul><h2 id="1-10-4创建js文件，实现kaptcha控件中changeVerifyCode方法"><a href="#1-10-4创建js文件，实现kaptcha控件中changeVerifyCode方法" class="headerlink" title="1.10.4创建js文件，实现kaptcha控件中changeVerifyCode方法"></a>1.10.4创建js文件，实现kaptcha控件中changeVerifyCode方法</h2><h2 id="1-10-5将kaptcha控件中的内容传入后台"><a href="#1-10-5将kaptcha控件中的内容传入后台" class="headerlink" title="1.10.5将kaptcha控件中的内容传入后台"></a>1.10.5将kaptcha控件中的内容传入后台</h2><p>将kaptcha控件中的内容读取到js文件中，在js文件里读取控件内容，将验证码内容读取保存到json中，通过ajax传到后台</p><h2 id="1-10-6创建CodeUtil工具类"><a href="#1-10-6创建CodeUtil工具类" class="headerlink" title="1.10.6创建CodeUtil工具类"></a>1.10.6创建CodeUtil工具类</h2><ul><li>CodeUtil工具类用于比较图片中实际的验证码与输入的验证码是否一致</li><li>图片中的验证码是从请求会话中得到的</li><li>在店铺注册中调用工具类来比较验证码是否一致</li></ul><h1 id="1-11前后端联合调试"><a href="#1-11前后端联合调试" class="headerlink" title="1.11前后端联合调试"></a>1.11前后端联合调试</h1><ol><li><p>以Debug方式启动Tomcat</p></li><li><p>在前端打断点，<strong>建议设置在明确执行的方法的入口处</strong>，这里我们选择设置在<code>点击提交按钮</code>后的代码处</p></li><li><p>后端打断点，在店铺注册的Controller方法的入口处</p></li><li><p>在前端打断点，在ajax中的弹出结果信息方法入口处</p></li><li><p>输入店铺的注册信息，输入验证码，点击提交，执行到前端js中的断点位置</p></li></ol><ol start="6"><li><p>在js代码逻辑中获取表单的各项信息，并将验证码也填入集合对象中</p></li><li><p>ajax通过注册店铺的url进入后端店铺注册的Controller方法中的断点处</p></li></ol><ol start="8"><li>方法执行结束，返回前端，弹出执行的结果信息</li></ol>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="校园商铺项目" scheme="http://wangjin1996219.github.io/categories/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="校园商铺1.0" scheme="http://wangjin1996219.github.io/tags/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1-0/"/>
    
  </entry>
  
  <entry>
    <title>校园商铺1.0-Logback配置与使用</title>
    <link href="http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-Logback%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://wangjin1996219.github.io/2021/03/24/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1.0-Logback%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-24T14:53:14.000Z</published>
    <updated>2021-03-31T09:35:03.168Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="1-1Logback介绍"><a href="#1-1Logback介绍" class="headerlink" title="1.1Logback介绍"></a>1.1Logback介绍</h1><h2 id="1-1-1使用日志的目的"><a href="#1-1-1使用日志的目的" class="headerlink" title="1.1.1使用日志的目的"></a>1.1.1使用日志的目的</h2><ul><li>做故障定位 </li><li>显示程序运行状态</li></ul><h2 id="1-1-2日志的三个主要模块"><a href="#1-1-2日志的三个主要模块" class="headerlink" title="1.1.2日志的三个主要模块"></a>1.1.2日志的三个主要模块</h2><ul><li><p><strong>logback-access</strong></p><p><strong>第三方的软件</strong>可以通过logback-access访问我们日志记录的内容</p></li><li><p><strong>logback-classic</strong></p><p>方便更换成其它的日志系统</p></li><li><p><strong>logback-core</strong></p><p>为以上的两个模块提供基础</p></li></ul><h2 id="1-1-3日志的三个标签"><a href="#1-1-3日志的三个标签" class="headerlink" title="1.1.3日志的三个标签"></a>1.1.3日志的三个标签</h2><ul><li><p><strong>logger</strong></p><p>存放日志的对象，定义日志的类型还有级别等信息</p></li><li><p><strong>appender</strong></p><p>指定日志输出的媒介，比如：控制台，文件，远程套接字服务器等</p></li><li><p><strong>layout</strong></p><p>格式化日志信息的输出</p></li></ul><h1 id="1-2Logback的配置"><a href="#1-2Logback的配置" class="headerlink" title="1.2Logback的配置"></a>1.2Logback的配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">//1.定义扫描属性，间隔60秒更新一次看是否变化了</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义参数常量 --&gt;</span> </span><br><span class="line">    //2.也就是定义全局变量</span><br><span class="line"><span class="comment">&lt;!-- 日志的级别：TRACE&lt;DEBUG&lt;INFO&lt;WARN&lt;ERROR --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- logger.trace(&quot;msg&quot;) logger.debug... --&gt;</span></span><br><span class="line">    //3.设置级别，默认级别为debug</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.level&quot;</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    //4.最大的保留历史的时间为30</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.maxHistory&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">    //5.设置日志存储的根路径</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.filePath&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;$&#123;catalina.base&#125;/logs/webapps&quot;</span> /&gt;</span></span><br><span class="line">    //6.定义日志展现的格式：时间格式||哪个线程执行的||哪个级别的日志||哪个包下的哪个类||日志信息</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.pattern&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;[%thread]%-5level %logger&#123;50&#125;-%msg%n&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制台设置 --&gt;</span></span><br><span class="line">    //7.设置输出媒介——控制台</span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;consoleAppender&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            //8.定义log的输出格式（encoder既将输出转换成字符串，又将字符串保存到文件中）</span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DEBUG --&gt;</span></span><br><span class="line">    //8.设置输出媒介——文件（该文件随着滚动，它的size不断增大）</span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;debugAppender&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line">        //9.输出媒介的文件路径</span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.filePath&#125;/debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件名称 --&gt;</span></span><br><span class="line">            //10.输出媒介的文件名称</span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.filePath&#125;/debug/debug.%d&#123;yyyy-MM-dd&#125;.log.gz</span><br><span class="line"><span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            //11.输出媒介的文件最大保存历史数量</span><br><span class="line"><span class="comment">&lt;!-- 文件最大保存历史数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            //12.设置输出格式</span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        //13.设置过滤器，只保留DEBUG相关的日志</span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- INFO --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;infoAppender&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.filePath&#125;/info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.filePath&#125;/info/info.%d&#123;yyyy-MM-dd&#125;.log.gz</span><br><span class="line"><span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件最大保存历史数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ERROR --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;errorAppender&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.filePath&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.filePath&#125;/error/error.%d&#123;yyyy-MM-dd&#125;.log.gz</span><br><span class="line"><span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件最大保存历史数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    //14.将logger与appender绑定，表示logger对象会往绑定的三个文件中输出日志信息</span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.imooc.o2o&quot;</span> <span class="attr">level</span>=<span class="string">&quot;$&#123;log.level&#125;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">additivity</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;debugAppender&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;infoAppender&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;errorAppender&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;consoleAppender&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-3验证配置"><a href="#1-3验证配置" class="headerlink" title="1.3验证配置"></a>1.3验证配置</h1><p><strong>1.调用方法生成logger对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logger logger=LoggerFactory.getLogger(AreaController.class);</span><br></pre></td></tr></table></figure><p><strong>2.打印日志信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;===start===&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.error(<span class="string">&quot;test error!&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;constTime:[&#123;&#125;ms]&quot;</span>,endTime-startTime);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="校园商铺项目" scheme="http://wangjin1996219.github.io/categories/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="校园商铺1.0" scheme="http://wangjin1996219.github.io/tags/%E6%A0%A1%E5%9B%AD%E5%95%86%E9%93%BA1-0/"/>
    
  </entry>
  
</feed>
